{
	"info": {
		"_postman_id": "919694a0-922e-4a57-a136-e8b9cbbb6f9b",
		"name": "Tyk Dashboard v4.1 API Collection",
		"description": "![](https://tyk.io/wp-content/uploads/2022/03/Tyk-Postman-tyk-dashboard-api_A.png)\n\n## Introduction\n\nThe Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.\n\nA common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.\n\nThe Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).\n\n## \n\n<a href=\"null\"></a>\n\nSecurity Hierarchy\n\nThe Dashboard API provides a more structured security layer to managing Tyk nodes.\n\n### Organisations, APIs and Users\n\nWith the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:\n\n*   **Organisations**: All APIs are *owned* by an organisation, this is designated by the `OrgID` parameter in the API Definition.\n*   **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).\n*   **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.\n*   **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.\n*   **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.\n    \n\nIn order to use the Dashboard API, you'll need to get the `Tyk Dashboard API Access Credentials` secret from your user profile on the Dashboard UI.\n\nThe secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:\n\n```\nauthorization: \n\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "0"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "portal/policies",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a single Policy by ID",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of Policy to get."
												}
											]
										},
										"description": "Get a Policy by ID"
									},
									"response": [
										{
											"name": "Get details of a single Policy",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to get."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"_id\": \"velit Lorem irure fugiat ea\",\n  \"id\": \"exercitation magna\",\n  \"name\": \"elit qui enim\",\n  \"org_id\": \"ipsum Ut in Lorem\",\n  \"rate\": 92741200.78671047,\n  \"per\": 25113034.479795575,\n  \"quota_max\": -82064800,\n  \"quota_renewal_rate\": -67209356,\n  \"throttle_interval\": -49974221.30305611,\n  \"throttle_retry_limit\": -17203122.190618634,\n  \"max_query_depth\": 42441101.44636148,\n  \"access_rights\": {\n    \"allowed_urls\": [\n      {\n        \"methods\": [\n          \"voluptate Excepteur\",\n          \"nulla voluptate laboris do\"\n        ],\n        \"url\": \"dolore anim ex in\"\n      },\n      {\n        \"methods\": [\n          \"et incididunt enim deserunt\",\n          \"nisi amet\"\n        ],\n        \"url\": \"deserunt et ea\"\n      }\n    ],\n    \"api_id\": \"pariatur\",\n    \"api_name\": \"est incididunt reprehenderit magna dolore\",\n    \"limit\": {\n      \"per\": -60796931.116259456,\n      \"quota_max\": 62361979,\n      \"quota_remaining\": 1812001,\n      \"quota_renewal_rate\": 60431720,\n      \"quota_renews\": 34701270,\n      \"rate\": 46786275.875472456,\n      \"set_by_policy\": false,\n      \"throttle_interval\": -73024574.4269476,\n      \"throttle_retry_limit\": 63033849\n    },\n    \"versions\": [\n      \"cupidatat dolor veniam do\",\n      \"Lorem dolor laborum veli\"\n    ]\n  },\n  \"hmac_enabled\": true,\n  \"enable_http_signature_validation\": false,\n  \"active\": false,\n  \"is_inactive\": true,\n  \"tags\": [\n    \"sint in voluptate\",\n    \"consectetur anim in\"\n  ],\n  \"key_expires_in\": 44740922.51032594,\n  \"partitions\": {\n    \"quota\": true,\n    \"rate_limit\": true,\n    \"complexity\": false,\n    \"acl\": false,\n    \"per_api\": true\n  },\n  \"last_updated\": \"exercitation\",\n  \"meta_data\": {},\n  \"graphql_access_rights\": {}\n}"
										},
										{
											"name": "Policy not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to get."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Policy not found\",\n  \"status\": \"error\"\n}"
										}
									]
								},
								{
									"name": "Update Policy Definition",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of Policy to update."
												}
											]
										},
										"description": "Update a Policy Definition"
									},
									"response": [
										{
											"name": "Policy updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to update."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"action\": \"updated\",\n  \"status\": \"ok\"\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to update."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"PUT operation on different IDs\",\n  \"status\": \"error\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to update."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Failed to create file!\",\n  \"status\": \"error\"\n}"
										}
									]
								},
								{
									"name": "Delete a single Policy by ID",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of Policy to delete."
												}
											]
										},
										"description": "Delete a Policy by ID"
									},
									"response": [
										{
											"name": "Delete policy by ID",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"action\": \"deleted\",\n  \"status\": \"ok\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/portal/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"portal",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of Policy to delete."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Delete failed\",\n  \"status\": \"error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get List of Policies",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/portal/policies/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"portal",
										"policies",
										""
									]
								},
								"description": "Get List of Policies"
							},
							"response": [
								{
									"name": "List of all policies",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"_id\": \"labore minim\",\n    \"id\": \"consequat anim\",\n    \"name\": \"ullamco pariatur nisi dolore\",\n    \"org_id\": \"aliqua Duis\",\n    \"rate\": 36970772.00648415,\n    \"per\": 10850324.148154393,\n    \"quota_max\": -84969620,\n    \"quota_renewal_rate\": -69683335,\n    \"throttle_interval\": 64357173.946487695,\n    \"throttle_retry_limit\": -58106172.62289837,\n    \"max_query_depth\": 4029417.7878798246,\n    \"access_rights\": {\n      \"allowed_urls\": [\n        {\n          \"methods\": [\n            \"irure adipisicing\",\n            \"ut ut Duis\"\n          ],\n          \"url\": \"pariatur dolore\"\n        },\n        {\n          \"methods\": [\n            \"cillum anim \",\n            \"dolor tempor\"\n          ],\n          \"url\": \"Duis Ut deserunt in\"\n        }\n      ],\n      \"api_id\": \"dolor anim aute Duis non\",\n      \"api_name\": \"in irure\",\n      \"limit\": {\n        \"per\": 80710646.24401096,\n        \"quota_max\": 93033226,\n        \"quota_remaining\": -20043973,\n        \"quota_renewal_rate\": -81015620,\n        \"quota_renews\": -44910761,\n        \"rate\": -83802743.0886826,\n        \"set_by_policy\": false,\n        \"throttle_interval\": 13789528.95676671,\n        \"throttle_retry_limit\": -70013583\n      },\n      \"versions\": [\n        \"ipsum in\",\n        \"sunt\"\n      ]\n    },\n    \"hmac_enabled\": true,\n    \"enable_http_signature_validation\": false,\n    \"active\": true,\n    \"is_inactive\": false,\n    \"tags\": [\n      \"et commodo velit\",\n      \"in Lorem id incididunt exercitation\"\n    ],\n    \"key_expires_in\": -81358106.99033841,\n    \"partitions\": {\n      \"quota\": true,\n      \"rate_limit\": false,\n      \"complexity\": false,\n      \"acl\": false,\n      \"per_api\": true\n    },\n    \"last_updated\": \"in ullamco\",\n    \"meta_data\": {},\n    \"graphql_access_rights\": {}\n  },\n  {\n    \"_id\": \"non in reprehenderit ad aliqua\",\n    \"id\": \"do enim proident\",\n    \"name\": \"ut\",\n    \"org_id\": \"Lorem labore\",\n    \"rate\": -42655991.07380837,\n    \"per\": -2139345.5814112425,\n    \"quota_max\": -12306429,\n    \"quota_renewal_rate\": -11619886,\n    \"throttle_interval\": 72502303.6869277,\n    \"throttle_retry_limit\": 57236682.46037477,\n    \"max_query_depth\": 41761040.52941504,\n    \"access_rights\": {\n      \"allowed_urls\": [\n        {\n          \"methods\": [\n            \"sit velit dolore\",\n            \"aute irure est\"\n          ],\n          \"url\": \"amet\"\n        },\n        {\n          \"methods\": [\n            \"quis eiusmod\",\n            \"aliquip ut ut labore\"\n          ],\n          \"url\": \"ad consequat nostrud dolore sit\"\n        }\n      ],\n      \"api_id\": \"irure eiusmod ad enim commodo\",\n      \"api_name\": \"mollit in laborum deserunt\",\n      \"limit\": {\n        \"per\": 96402819.70197639,\n        \"quota_max\": -21604610,\n        \"quota_remaining\": -51808914,\n        \"quota_renewal_rate\": 21337897,\n        \"quota_renews\": -98224751,\n        \"rate\": -52510720.240033135,\n        \"set_by_policy\": true,\n        \"throttle_interval\": 15445723.370556235,\n        \"throttle_retry_limit\": 91684742\n      },\n      \"versions\": [\n        \"labore est in commodo\",\n        \"quis mollit nulla incididunt\"\n      ]\n    },\n    \"hmac_enabled\": true,\n    \"enable_http_signature_validation\": true,\n    \"active\": false,\n    \"is_inactive\": true,\n    \"tags\": [\n      \"deserunt\",\n      \"consectetur\"\n    ],\n    \"key_expires_in\": 86931346.72729501,\n    \"partitions\": {\n      \"quota\": false,\n      \"rate_limit\": true,\n      \"complexity\": false,\n      \"acl\": false,\n      \"per_api\": false\n    },\n    \"last_updated\": \"cupidata\",\n    \"meta_data\": {},\n    \"graphql_access_rights\": {}\n  }\n]"
								}
							]
						},
						{
							"name": "Create Policy Definition",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/portal/policies/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"portal",
										"policies",
										""
									]
								},
								"description": "Creating policy definitions is slightly different to the core API, API definitions are wrapped inside an api_definition field and event handlers, such as webhooks are not embedded in the main api_defintion object (though they can be), webhooks are instead appended as references into the hook_references field, the API will embed the correct webhook data into the event handler interface."
							},
							"response": [
								{
									"name": "Policy created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"action\": \"created\",\n  \"status\": \"ok\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Request malformed\",\n  \"status\": \"error\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"new policy\",\n  \"quota_max\": 60,\n  \"quota_renewal_rate\": 60,\n  \"allowance\": 100,\n  \"rate\": 100,\n  \"per\": 5,\n  \"org_id\": \"53ac07777cbb8c2d53000002\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												""
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Failed to create file!\",\n  \"status\": \"error\"\n}"
								}
							]
						},
						{
							"name": "Search List of Policies",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/portal/policies/search?q=aute ut Duis Ut",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"portal",
										"policies",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "aute ut Duis Ut",
											"description": "Search query"
										}
									]
								},
								"description": "Search List of Policies"
							},
							"response": [
								{
									"name": "List of Policies (TODO)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/portal/policies/search?q=aute ut Duis Ut",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"portal",
												"policies",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "aute ut Duis Ut"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "apis",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a single API by ID",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of API to get. Can either be internal or public API id."
												}
											]
										},
										"description": "Get an API by ID"
									},
									"response": [
										{
											"name": "API definition",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to get. Can either be internal or public API id."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"tags\": [\n    \"voluptate deserunt\",\n    \"aliqua qui reprehenderit\"\n  ],\n  \"CORS\": {\n    \"allow_credentials\": false,\n    \"allowed_headers\": [\n      \"labore in\",\n      \"cillum\"\n    ],\n    \"allowed_methods\": [\n      \"Duis Excepteur sunt\",\n      \"qui dolor culpa nisi consequat\"\n    ],\n    \"allowed_origins\": [\n      \"laboris tempor aliqua eu\",\n      \"Excepteur laborum velit\"\n    ],\n    \"debug\": false,\n    \"enable\": true,\n    \"exposed_headers\": [\n      \"ad minim est laborum Duis\",\n      \"sed commodo enim\"\n    ],\n    \"max_age\": 71650898,\n    \"options_passthrough\": true\n  },\n  \"active\": true,\n  \"allowed_ips\": [\n    \"veniam id nulla\",\n    \"Lorem sit voluptate\"\n  ],\n  \"api_id\": \"Excepteur\",\n  \"auth\": {\n    \"auth_header_name\": \"deserunt magna\",\n    \"cookie_name\": \"veniam\",\n    \"param_name\": \"exercitation veniam\",\n    \"signature\": {\n      \"algorithm\": \"minim ea\",\n      \"allowed_clock_skew\": 11999771,\n      \"error_code\": 63105588,\n      \"error_message\": \"par\",\n      \"header\": \"qui nulla Lorem eiusmod\",\n      \"secret\": \"ad Duis ea dolore dolor\"\n    },\n    \"use_certificate\": false,\n    \"use_cookie\": true,\n    \"use_param\": false,\n    \"validate_signature\": false\n  },\n  \"auth_provider\": {\n    \"meta\": {\n      \"exercitation_7\": {},\n      \"suntaa3\": {},\n      \"enim39d\": {}\n    },\n    \"name\": \"Lorem velit do\",\n    \"storage_engine\": \"et sit in\"\n  },\n  \"base_identity_provided_by\": \"magna dolore nulla Lorem\",\n  \"basic_auth\": {\n    \"body_password_regexp\": \"cupidatat laboris\",\n    \"body_user_regexp\": \"est reprehenderit\",\n    \"cache_ttl\": -90523312,\n    \"disable_caching\": false,\n    \"extract_from_body\": true\n  },\n  \"blacklisted_ips\": [\n    \"deserunt non veniam\",\n    \"fugiat ut eiusmod voluptate\"\n  ],\n  \"cache_options\": {\n    \"cache_all_safe_requests\": true,\n    \"cache_control_ttl_header\": \"pariatur\",\n    \"cache_response_codes\": [\n      6515069,\n      79556476\n    ],\n    \"cache_timeout\": 6528188,\n    \"enable_cache\": true,\n    \"enable_upstream_cache_control\": false\n  },\n  \"certificates\": [\n    \"nisi ut Lorem\",\n    \"consectetur\"\n  ],\n  \"client_certificates\": [\n    \"laboris ex non deserunt\",\n    \"nostrud Excepteur ipsum eiusmod commodo\"\n  ],\n  \"config_data\": {\n    \"cillum_90a\": {},\n    \"adipisicing1f\": {}\n  },\n  \"custom_middleware\": {\n    \"auth_check\": {\n      \"name\": \"veniam quis mollit Lorem dolor\",\n      \"path\": \"ipsum dolor voluptate officia\",\n      \"require_session\": true\n    },\n    \"driver\": \"magna ad\",\n    \"id_extractor\": {\n      \"extract_from\": \"irure dolore officia nisi\",\n      \"extract_with\": \"sunt eiusmod elit labore enim\",\n      \"extractor_config\": {\n        \"mollit87\": {},\n        \"non_8\": {},\n        \"nullaf5\": {},\n        \"incididunt670\": {}\n      }\n    },\n    \"post\": [\n      {\n        \"name\": \"magna Ut\",\n        \"path\": \"anim qui\",\n        \"require_session\": false\n      },\n      {\n        \"name\": \"et elit\",\n        \"path\": \"aute\",\n        \"require_session\": true\n      }\n    ],\n    \"post_key_auth\": [\n      {\n        \"name\": \"mollit cillum sunt dolor ut\",\n        \"path\": \"quis\",\n        \"require_session\": false\n      },\n      {\n        \"name\": \"sunt nulla do magna\",\n        \"path\": \"velit cupidatat\",\n        \"require_session\": false\n      }\n    ],\n    \"pre\": [\n      {\n        \"name\": \"pariatur veniam dol\",\n        \"path\": \"ut sed tempor\",\n        \"require_session\": true\n      },\n      {\n        \"name\": \"quis qui pariatur amet\",\n        \"path\": \"et sunt adipisicing in non\",\n        \"require_session\": true\n      }\n    ],\n    \"response\": [\n      {\n        \"name\": \"Lorem\",\n        \"path\": \"deserunt in\",\n        \"require_session\": false\n      },\n      {\n        \"name\": \"non sunt commodo\",\n        \"path\": \"eu ea\",\n        \"require_session\": true\n      }\n    ]\n  },\n  \"custom_middleware_bundle\": \"dolor\",\n  \"definition\": {\n    \"key\": \"ut in ex aliqua co\",\n    \"location\": \"ad non quis sint deserunt\",\n    \"strip_path\": true\n  },\n  \"disable_quota\": false,\n  \"disable_rate_limit\": false,\n  \"do_not_track\": false,\n  \"domain\": \"amet incididunt\",\n  \"dont_set_quota_on_create\": false,\n  \"enable_batch_request_support\": false,\n  \"enable_context_vars\": true,\n  \"enable_coprocess_auth\": false,\n  \"enable_ip_blacklisting\": true,\n  \"enable_ip_whitelisting\": true,\n  \"enable_jwt\": true,\n  \"enable_signature_checking\": true,\n  \"event_handlers\": {\n    \"events\": {}\n  },\n  \"expire_analytics_after\": -88564374,\n  \"global_rate_limit\": {\n    \"per\": 8216396.279959738,\n    \"rate\": -15725483.827550054\n  },\n  \"hmac_allowed_algorithms\": [\n    \"in commodo fugiat dolor\",\n    \"quis cillum non esse pariatur\"\n  ],\n  \"hmac_allowed_clock_skew\": 64924489.856580526,\n  \"id\": \"incididunt magna in\",\n  \"internal\": true,\n  \"jwt_client_base_field\": \"ad deserunt dolor sunt\",\n  \"jwt_expires_at_validation_skew\": -55772019,\n  \"jwt_identity_base_field\": \"fugiat culpa magna ex enim\",\n  \"jwt_issued_at_validation_skew\": 22937058,\n  \"jwt_not_before_validation_skew\": 71489729,\n  \"jwt_policy_field_name\": \"non mollit labore sed Duis\",\n  \"jwt_scope_claim_name\": \"dolor nostrud deserunt\",\n  \"jwt_scope_to_policy_mapping\": {\n    \"occaecat_f85\": \"et Lorem cil\"\n  },\n  \"jwt_signing_method\": \"id\",\n  \"jwt_skip_kid\": true,\n  \"jwt_source\": \"esse irure consequat et\",\n  \"name\": \"labore aliqua laboris\",\n  \"notifications\": {\n    \"oauth_on_keychange_url\": \"quis voluptate aliquip do eiusmod\",\n    \"shared_secret\": \"in esse\"\n  },\n  \"oauth_meta\": {\n    \"allowed_access_types\": [\n      \"magna ullamc\",\n      \"velit do sed cupidatat\"\n    ],\n    \"allowed_authorize_types\": [\n      \"aute occaecat\",\n      \"nisi in\"\n    ],\n    \"auth_login_redirect\": \"anim\"\n  },\n  \"openid_options\": {\n    \"providers\": [\n      {\n        \"client_ids\": {\n          \"amet_\": \"in minim\"\n        },\n        \"issuer\": \"quis esse nostrud proident aliqua\"\n      },\n      {\n        \"client_ids\": {\n          \"in_28\": \"proident dolor ex elit\",\n          \"in_6e\": \"ullamco quis ipsum\",\n          \"commodod8\": \"magna\"\n        },\n        \"issuer\": \"Duis consequat fugiat\"\n      }\n    ],\n    \"segregate_by_client\": true\n  },\n  \"org_id\": \"aliquip\",\n  \"pinned_public_keys\": {\n    \"ullamco5_a\": \"tempor amet reprehenderit eiusmod\",\n    \"et8d\": \"elit dolore eu voluptate\"\n  },\n  \"proxy\": {\n    \"check_host_against_uptime_tests\": false,\n    \"disable_strip_slash\": true,\n    \"enable_load_balancing\": false,\n    \"listen_path\": \"dolor laborum labore ipsum\",\n    \"preserve_host_header\": true,\n    \"service_discovery\": {\n      \"cache_timeout\": 37943120,\n      \"data_path\": \"sun\",\n      \"endpoint_returns_list\": false,\n      \"parent_data_path\": \"sit\",\n      \"port_data_path\": \"ipsum\",\n      \"query_endpoint\": \"mollit do\",\n      \"target_path\": \"aliquip laboris\",\n      \"use_discovery_service\": true,\n      \"use_nested_query\": false,\n      \"use_target_list\": false\n    },\n    \"strip_listen_path\": true,\n    \"target_list\": [\n      \"sit\",\n      \"repre\"\n    ],\n    \"target_url\": \"anim qui vel\",\n    \"transport\": {\n      \"proxy_url\": \"occaecat\",\n      \"ssl_ciphers\": [\n        \"occaecat magna\",\n        \"non elit volu\"\n      ],\n      \"ssl_insecure_skip_verify\": false,\n      \"ssl_min_version\": 32987840\n    }\n  },\n  \"response_processors\": [\n    {\n      \"name\": \"in mollit ut\",\n      \"options\": {}\n    },\n    {\n      \"name\": \"ad pariatur\",\n      \"options\": {}\n    }\n  ],\n  \"session_lifetime\": -59739118,\n  \"session_provider\": {\n    \"meta\": {\n      \"nulla_4\": {},\n      \"occaecat_5b\": {},\n      \"uta\": {}\n    },\n    \"name\": \"tempor commodo elit\",\n    \"storage_engine\": \"quis\"\n  },\n  \"slug\": \"adipisicing cillum\",\n  \"strip_auth_data\": true,\n  \"tag_headers\": [\n    \"consectetur officia consequat irure\",\n    \"Duis dolore\"\n  ],\n  \"upstream_certificates\": {\n    \"dolor30\": \"nostrud Du\",\n    \"eiusmod2_1\": \"ea ut\"\n  },\n  \"uptime_tests\": {\n    \"check_list\": [\n      {\n        \"body\": \"cillum Excepteur Lorem\",\n        \"headers\": {\n          \"Excepteur_882\": \"et reprehenderit mollit incididunt ad\",\n          \"culpa8e\": \"mollit et\",\n          \"adipisicing_4d\": \"consectetur proide\"\n        },\n        \"method\": \"do fugiat magna minim\",\n        \"url\": \"amet Duis consequat in\"\n      },\n      {\n        \"body\": \"voluptate cupidatat labore\",\n        \"headers\": {\n          \"cillum_56\": \"sunt consequat exercitation\"\n        },\n        \"method\": \"elit esse Ut\",\n        \"url\": \"nulla\"\n      }\n    ],\n    \"config\": {\n      \"expire_utime_after\": 85608046,\n      \"recheck_wait\": -66074868,\n      \"service_discovery\": {\n        \"cache_timeout\": -86271000,\n        \"data_path\": \"enim ea irure\",\n        \"endpoint_returns_list\": true,\n        \"parent_data_path\": \"ut cillum ea ipsum\",\n        \"port_data_path\": \"proident sit cupidatat nisi\",\n        \"query_endpoint\": \"in amet\",\n        \"target_path\": \"sunt dolor dolor\",\n        \"use_discovery_service\": true,\n        \"use_nested_query\": false,\n        \"use_target_list\": true\n      }\n    }\n  },\n  \"use_basic_auth\": true,\n  \"use_keyless\": false,\n  \"use_mutual_tls_auth\": true,\n  \"use_oauth2\": false,\n  \"use_openid\": false,\n  \"use_standard_auth\": true,\n  \"version_data\": {\n    \"default_version\": \"non quis\",\n    \"not_versioned\": true,\n    \"versions\": {\n      \"amet_d\": {\n        \"paths\": {\n          \"black_list\": [\n            \"proident nostrud velit adipisicing\",\n            \"eu Ut eiusmod qui occaecat\"\n          ],\n          \"ignored\": [\n            \"minim id incididunt\",\n            \"ut ut\"\n          ],\n          \"white_list\": [\n            \"irure\",\n            \"sit sed Lorem eu\"\n          ]\n        },\n        \"expires\": \"aliqua\",\n        \"extended_paths\": {\n          \"advance_cache_config\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"black_list\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"cache\": [\n            \"sunt nisi\",\n            \"dolore mollit ad\"\n          ],\n          \"circuit_breakers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"do_not_track_endpoints\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"hard_timeouts\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"ignored\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"internal\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"method_transforms\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"size_limits\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"track_endpoints\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"transform\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"transform_headers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"transform_jq\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"transform_jq_response\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"transform_response\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"transform_response_headers\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"url_rewrites\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"validate_json\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"virtual\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"white_list\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"global_headers\": {\n          \"qui__b\": \"cupidatat anim\",\n          \"velit0ae\": \"cillum do\"\n        },\n        \"global_headers_remove\": [\n          \"aliqua aute\",\n          \"sed esse d\"\n        ],\n        \"global_size_limit\": -45393691,\n        \"name\": \"anim enim dol\",\n        \"override_target\": \"cillum aute ut id cupidat\",\n        \"use_extended_paths\": false\n      }\n    }\n  }\n}"
										}
									]
								},
								{
									"name": "Update API Definition",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"api_definition\": {\n    \"id\": \"54c24242eba6db1c9a000002\",\n    \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n    \"name\": \"Test\",\n    \"auth\": {\n      \"auth_header_name\": \"authorization\"\n    },\n    \"definition\": {\n      \"location\": \"header\",\n      \"key\": \"\"\n    },\n    \"proxy\": {\n      \"target_url\": \"http://httpbin.org/\"\n    },\n    \"version_data\": {\n      \"use_extended_paths\": true,\n      \"not_versioned\": true,\n      \"versions\": {\n        \"Default\": {\n          \"expires\": \"\",\n          \"name\": \"Default\",\n          \"paths\": {\n            \"ignored\": [],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"extended_paths\": {\n            \"ignored\": [\n              {\n                \"path\": \"/test-path/\",\n                \"method_actions\": {\n                  \"GET\": {\n                    \"action\": \"no_action\",\n                    \"code\": 200,\n                    \"data\": \"\",\n                    \"headers\": {}\n                  }\n                }\n              },\n              {\n                \"path\": \"/test-path/reply\",\n                \"method_actions\": {\n                  \"GET\": {\n                    \"action\": \"reply\",\n                    \"code\": 200,\n                    \"data\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n                    \"headers\": {\n                      \"x-test\": \"test\"\n                    }\n                  }\n                }\n              }\n            ],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"use_extended_paths\": true\n        }\n      }\n    },\n    \"use_oauth2\": false,\n    \"oauth_meta\": {\n      \"auth_login_redirect\": \"\",\n      \"allowed_access_types\": [],\n      \"allowed_authorize_types\": [\n        \"token\"\n      ]\n    },\n    \"notifications\": {\n      \"shared_secret\": \"\",\n      \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_ip_whitelisting\": true,\n    \"allowed_ips\": [\n      \"127.0.0.1\"\n    ],\n    \"use_keyless\": false,\n    \"enable_signature_checking\": false,\n    \"use_basic_auth\": false,\n    \"active\": true,\n    \"enable_batch_request_support\": true\n  },\n  \"hook_references\": [\n    {\n      \"event_name\": \"QuotaExceeded\",\n      \"hook\": {\n        \"api_model\": {},\n        \"id\": \"54be6c0beba6db07a6000002\",\n        \"org_id\": \"54b53d3aeba6db5c35000002\",\n        \"name\": \"Test Post\",\n        \"method\": \"POST\",\n        \"target_path\": \"http://httpbin.org/post\",\n        \"template_path\": \"\",\n        \"header_map\": {\n          \"x-tyk-test\": \"123456\"\n        },\n        \"event_timeout\": 0\n      },\n      \"event_timeout\": 60\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/apis/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of API to update. Can either be internal or public API id."
												}
											]
										},
										"description": "Update an API Definition. api_id can be updated for On-Premise installations, but it cannot be updated when the Dashboard resides in Tyk Cloud. Updates to api_id in Tyk Cloud will be ignored."
									},
									"response": [
										{
											"name": "API updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"api_definition\": {\n    \"id\": \"54c24242eba6db1c9a000002\",\n    \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n    \"name\": \"Test\",\n    \"auth\": {\n      \"auth_header_name\": \"authorization\"\n    },\n    \"definition\": {\n      \"location\": \"header\",\n      \"key\": \"\"\n    },\n    \"proxy\": {\n      \"target_url\": \"http://httpbin.org/\"\n    },\n    \"version_data\": {\n      \"use_extended_paths\": true,\n      \"not_versioned\": true,\n      \"versions\": {\n        \"Default\": {\n          \"expires\": \"\",\n          \"name\": \"Default\",\n          \"paths\": {\n            \"ignored\": [],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"extended_paths\": {\n            \"ignored\": [\n              {\n                \"path\": \"/test-path/\",\n                \"method_actions\": {\n                  \"GET\": {\n                    \"action\": \"no_action\",\n                    \"code\": 200,\n                    \"data\": \"\",\n                    \"headers\": {}\n                  }\n                }\n              },\n              {\n                \"path\": \"/test-path/reply\",\n                \"method_actions\": {\n                  \"GET\": {\n                    \"action\": \"reply\",\n                    \"code\": 200,\n                    \"data\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n                    \"headers\": {\n                      \"x-test\": \"test\"\n                    }\n                  }\n                }\n              }\n            ],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"use_extended_paths\": true\n        }\n      }\n    },\n    \"use_oauth2\": false,\n    \"oauth_meta\": {\n      \"auth_login_redirect\": \"\",\n      \"allowed_access_types\": [],\n      \"allowed_authorize_types\": [\n        \"token\"\n      ]\n    },\n    \"notifications\": {\n      \"shared_secret\": \"\",\n      \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_ip_whitelisting\": true,\n    \"allowed_ips\": [\n      \"127.0.0.1\"\n    ],\n    \"use_keyless\": false,\n    \"enable_signature_checking\": false,\n    \"use_basic_auth\": false,\n    \"active\": true,\n    \"enable_batch_request_support\": true\n  },\n  \"hook_references\": [\n    {\n      \"event_name\": \"QuotaExceeded\",\n      \"hook\": {\n        \"api_model\": {},\n        \"id\": \"54be6c0beba6db07a6000002\",\n        \"org_id\": \"54b53d3aeba6db5c35000002\",\n        \"name\": \"Test Post\",\n        \"method\": \"POST\",\n        \"target_path\": \"http://httpbin.org/post\",\n        \"template_path\": \"\",\n        \"header_map\": {\n          \"x-tyk-test\": \"123456\"\n        },\n        \"event_timeout\": 0\n      },\n      \"event_timeout\": 60\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to update. Can either be internal or public API id."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"ok\",\n  \"action\": \"updated\",\n  \"key\": \"{...API JSON definition...}\"\n}"
										},
										{
											"name": "Malformed data",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"api_definition\": {\n    \"id\": \"54c24242eba6db1c9a000002\",\n    \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n    \"name\": \"Test\",\n    \"auth\": {\n      \"auth_header_name\": \"authorization\"\n    },\n    \"definition\": {\n      \"location\": \"header\",\n      \"key\": \"\"\n    },\n    \"proxy\": {\n      \"target_url\": \"http://httpbin.org/\"\n    },\n    \"version_data\": {\n      \"use_extended_paths\": true,\n      \"not_versioned\": true,\n      \"versions\": {\n        \"Default\": {\n          \"expires\": \"\",\n          \"name\": \"Default\",\n          \"paths\": {\n            \"ignored\": [],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"extended_paths\": {\n            \"ignored\": [\n              {\n                \"path\": \"/test-path/\",\n                \"method_actions\": {\n                  \"GET\": {\n                    \"action\": \"no_action\",\n                    \"code\": 200,\n                    \"data\": \"\",\n                    \"headers\": {}\n                  }\n                }\n              },\n              {\n                \"path\": \"/test-path/reply\",\n                \"method_actions\": {\n                  \"GET\": {\n                    \"action\": \"reply\",\n                    \"code\": 200,\n                    \"data\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n                    \"headers\": {\n                      \"x-test\": \"test\"\n                    }\n                  }\n                }\n              }\n            ],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"use_extended_paths\": true\n        }\n      }\n    },\n    \"use_oauth2\": false,\n    \"oauth_meta\": {\n      \"auth_login_redirect\": \"\",\n      \"allowed_access_types\": [],\n      \"allowed_authorize_types\": [\n        \"token\"\n      ]\n    },\n    \"notifications\": {\n      \"shared_secret\": \"\",\n      \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_ip_whitelisting\": true,\n    \"allowed_ips\": [\n      \"127.0.0.1\"\n    ],\n    \"use_keyless\": false,\n    \"enable_signature_checking\": false,\n    \"use_basic_auth\": false,\n    \"active\": true,\n    \"enable_batch_request_support\": true\n  },\n  \"hook_references\": [\n    {\n      \"event_name\": \"QuotaExceeded\",\n      \"hook\": {\n        \"api_model\": {},\n        \"id\": \"54be6c0beba6db07a6000002\",\n        \"org_id\": \"54b53d3aeba6db5c35000002\",\n        \"name\": \"Test Post\",\n        \"method\": \"POST\",\n        \"target_path\": \"http://httpbin.org/post\",\n        \"template_path\": \"\",\n        \"header_map\": {\n          \"x-tyk-test\": \"123456\"\n        },\n        \"event_timeout\": 0\n      },\n      \"event_timeout\": 60\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to update. Can either be internal or public API id."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"error\",\n  \"message\": \"Malformed API data\"\n}"
										}
									]
								},
								{
									"name": "Delete a single API by ID",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of API to get. Can either be internal or public API id."
												}
											]
										},
										"description": "Delete an API by ID"
									},
									"response": [
										{
											"name": "API deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to get. Can either be internal or public API id."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"API deleted\",\n  \"status\": \"ok\"\n}"
										},
										{
											"name": "No API ID specified",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to get. Can either be internal or public API id."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"API ID not specified\",\n  \"status\": \"error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "oas",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Patch a single OAS API by ID",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/oas/:id?listenPath=/listen-path&upstreamURL=https://upstream.org/endpoint&customDomain=custom-domain.org&validateRequest=false&allowList=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"oas",
														":id"
													],
													"query": [
														{
															"key": "listenPath",
															"value": "/listen-path",
															"description": "listenPath for the API"
														},
														{
															"key": "upstreamURL",
															"value": "https://upstream.org/endpoint",
															"description": "upstreamURL for the API"
														},
														{
															"key": "customDomain",
															"value": "custom-domain.org",
															"description": "custom domain for the API"
														},
														{
															"key": "validateRequest",
															"value": "false",
															"description": "enable validateRequest middleware for all endpoints having a request body with media type application/json"
														},
														{
															"key": "allowList",
															"value": "<string>",
															"description": "enable allowList middleware for all endpoints"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to patch"
														}
													]
												},
												"description": "Update API with OAS format. You can use this endpoint to update OAS part of the tyk API definition.\nThis endpoint allows you to configure tyk OAS extension based on query params provided(similar to import)"
											},
											"response": [
												{
													"name": "API deleted",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/oas/:id?listenPath=/listen-path&upstreamURL=https://upstream.org/endpoint&customDomain=custom-domain.org&validateRequest=<string>&allowList=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																"oas",
																":id"
															],
															"query": [
																{
																	"key": "listenPath",
																	"value": "/listen-path"
																},
																{
																	"key": "upstreamURL",
																	"value": "https://upstream.org/endpoint"
																},
																{
																	"key": "customDomain",
																	"value": "custom-domain.org"
																},
																{
																	"key": "validateRequest",
																	"value": "<string>"
																},
																{
																	"key": "allowList",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API to patch"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Api updated\",\n  \"status\": \"ok\"\n}"
												},
												{
													"name": "No API ID specified",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/oas/:id?listenPath=/listen-path&upstreamURL=https://upstream.org/endpoint&customDomain=custom-domain.org&validateRequest=<string>&allowList=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																"oas",
																":id"
															],
															"query": [
																{
																	"key": "listenPath",
																	"value": "/listen-path"
																},
																{
																	"key": "upstreamURL",
																	"value": "https://upstream.org/endpoint"
																},
																{
																	"key": "customDomain",
																	"value": "custom-domain.org"
																},
																{
																	"key": "validateRequest",
																	"value": "<string>"
																},
																{
																	"key": "allowList",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API to patch"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"the supplied API definition is in OAS format, please use the Tyk native format for this API\",\n  \"status\": \"error\"\n}"
												},
												{
													"name": "when API not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/oas/:id?listenPath=/listen-path&upstreamURL=https://upstream.org/endpoint&customDomain=custom-domain.org&validateRequest=<string>&allowList=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																"oas",
																":id"
															],
															"query": [
																{
																	"key": "listenPath",
																	"value": "/listen-path"
																},
																{
																	"key": "upstreamURL",
																	"value": "https://upstream.org/endpoint"
																},
																{
																	"key": "customDomain",
																	"value": "custom-domain.org"
																},
																{
																	"key": "validateRequest",
																	"value": "<string>"
																},
																{
																	"key": "allowList",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API to patch"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"API not found\",\n  \"status\": \"error\"\n}"
												}
											]
										},
										{
											"name": "Delete a single OAS API by ID",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/oas/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"oas",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API to get. Can either be internal or public API id."
														}
													]
												},
												"description": "Delete a OAS API by ID"
											},
											"response": [
												{
													"name": "API deleted",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/oas/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																"oas",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API to get. Can either be internal or public API id."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"API deleted\",\n  \"status\": \"ok\"\n}"
												},
												{
													"name": "No API ID specified",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/oas/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																"oas",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API to get. Can either be internal or public API id."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"API ID not specified\",\n  \"status\": \"error\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "import OAS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"value\": \"reference https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json not found in the OpenAPI spec\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/apis/oas/import",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"oas",
												"import"
											]
										},
										"description": "Create a new OAS format API, without x-tyk-gateway.\nFor use with an existing OAS API that you want to expose via your Tyk Gateway. (New)"
									},
									"response": [
										{
											"name": "API definition",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"value\": \"reference https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json not found in the OpenAPI spec\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/oas/import",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"oas",
														"import"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"ok\",\n  \"action\": \"added\",\n  \"key\": \"{created APIID}\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"value\": \"reference https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json not found in the OpenAPI spec\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/oas/import",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"oas",
														"import"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Request malformed\",\n  \"status\": \"error\"\n}"
										}
									]
								},
								{
									"name": "download Api OAS Public",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/oas/:apiID/export?mode=public",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"oas",
												":apiID",
												"export"
											],
											"query": [
												{
													"key": "mode",
													"value": "public",
													"description": "Mode of OAS export, by default mode could be empty which means to export OAS spec including OAS Tyk extension.\nWhen mode=public, OAS spec excluding Tyk extension is exported"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "aute ut Duis Ut",
													"description": "(Required) The API ID"
												}
											]
										},
										"description": "download API definition in OAS format(only APIs saved in OAS format),"
									},
									"response": [
										{
											"name": "API definition",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/oas/:apiID/export?mode=public",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"oas",
														":apiID",
														"export"
													],
													"query": [
														{
															"key": "mode",
															"value": "public"
														}
													],
													"variable": [
														{
															"key": "apiID",
															"value": "aute ut Duis Ut",
															"description": "(Required) The API ID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"dolore Excepteur\",\n  \"message\": \"laborum minim cillum ipsum eu\",\n  \"schema\": \"in anim Duis in\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "{api ID}/keys",
							"item": [
								{
									"name": "{key ID}",
									"item": [
										{
											"name": "Get key",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":apiID",
														"keys",
														":keyID"
													],
													"variable": [
														{
															"key": "apiID",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
														},
														{
															"key": "keyID",
															"value": "aute ut Duis Ut",
															"description": "(Required) The Key ID."
														}
													]
												},
												"description": "Fetches the key that grant access to the API with the ID {apiID} and key ID {keyID}."
											},
											"response": [
												{
													"name": "Key retrieved successfully.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																":apiID",
																"keys",
																":keyID"
															],
															"variable": [
																{
																	"key": "apiID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
																},
																{
																	"key": "keyID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) The Key ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"api_model\": {},\n  \"key_id\": \"eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0\",\n  \"data\": {\n    \"last_check\": 1421674410,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 1423684135,\n    \"quota_max\": -1,\n    \"quota_renews\": 1421164189,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": 60,\n    \"access_rights\": {\n      \"39d2c98be05c424371c600bd8b3e2242\": {\n        \"api_name\": \"Nitrous Test\",\n        \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n        \"versions\": [\n          \"Default\"\n        ]\n      }\n    }\n  },\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"oauth_client_id\": \"\",\n  \"basic_auth_data\": {\n    \"password\": \"\"\n  },\n  \"hmac_enabled\": true,\n  \"hmac_string\": \"\"\n}"
												}
											]
										},
										{
											"name": "Update key",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_name\": \"Nitrous Test\",\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"oauth_client_id\": \"\",\n  \"basic_auth_data\": {\n    \"password\": \"\"\n  },\n  \"hmac_enabled\": true,\n  \"hmac_string\": \"\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":apiID",
														"keys",
														":keyID"
													],
													"variable": [
														{
															"key": "apiID",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
														},
														{
															"key": "keyID",
															"value": "aute ut Duis Ut",
															"description": "(Required) The Key ID."
														}
													]
												},
												"description": "You can also manually add keys to Tyk using your own key-generation algorithm. It is recommended if using this approach to ensure that the OrgID being used in the API Definition and the key data is blank so that Tyk does not try to prepend or manage the key in any way."
											},
											"response": [
												{
													"name": "Key updated",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_name\": \"Nitrous Test\",\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"oauth_client_id\": \"\",\n  \"basic_auth_data\": {\n    \"password\": \"\"\n  },\n  \"hmac_enabled\": true,\n  \"hmac_string\": \"\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																":apiID",
																"keys",
																":keyID"
															],
															"variable": [
																{
																	"key": "apiID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
																},
																{
																	"key": "keyID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) The Key ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"api_model\": {},\n  \"key_id\": \"eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0\",\n  \"data\": {\n    \"last_check\": 1421674410,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 1423684135,\n    \"quota_max\": -1,\n    \"quota_renews\": 1421164189,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": 60,\n    \"access_rights\": {\n      \"39d2c98be05c424371c600bd8b3e2242\": {\n        \"api_name\": \"Nitrous Test\",\n        \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n        \"versions\": [\n          \"Default\"\n        ]\n      }\n    }\n  },\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"oauth_client_id\": \"\",\n  \"basic_auth_data\": {\n    \"password\": \"\"\n  },\n  \"hmac_enabled\": true,\n  \"hmac_string\": \"\"\n}"
												},
												{
													"name": "Unauthorized.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_name\": \"Nitrous Test\",\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"oauth_client_id\": \"\",\n  \"basic_auth_data\": {\n    \"password\": \"\"\n  },\n  \"hmac_enabled\": true,\n  \"hmac_string\": \"\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																":apiID",
																"keys",
																":keyID"
															],
															"variable": [
																{
																	"key": "apiID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
																},
																{
																	"key": "keyID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) The Key ID."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"User does not have permission to add API to key Access Rights!\"\n}"
												}
											]
										},
										{
											"name": "Delete key",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":apiID",
														"keys",
														":keyID"
													],
													"variable": [
														{
															"key": "apiID",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
														},
														{
															"key": "keyID",
															"value": "aute ut Duis Ut",
															"description": "(Required) The Key ID."
														}
													]
												},
												"description": "Deleting a key will remove it permanently from the system, however analytics relating to that key will still be available."
											},
											"response": [
												{
													"name": "Key deleted",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																":apiID",
																"keys",
																":keyID"
															],
															"variable": [
																{
																	"key": "apiID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
																},
																{
																	"key": "keyID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) The Key ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"Key deleted successfully\"\n}"
												},
												{
													"name": "Unauthorized.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/apis/:apiID/keys/:keyID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"apis",
																":apiID",
																"keys",
																":keyID"
															],
															"variable": [
																{
																	"key": "apiID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
																},
																{
																	"key": "keyID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) The Key ID."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"Attempted access to non-owned key\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "List keys",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/:apiID/keys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												":apiID",
												"keys"
											],
											"variable": [
												{
													"key": "apiID",
													"value": "aute ut Duis Ut",
													"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
												}
											]
										},
										"description": "Lists keys that grant access to the API with the ID {apiID}."
									},
									"response": [
										{
											"name": "Keys retrieved successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/:apiID/keys",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														":apiID",
														"keys"
													],
													"variable": [
														{
															"key": "apiID",
															"value": "aute ut Duis Ut",
															"description": "(Required) ID of API the keys grant access to. Can either be the internal or external API ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"keys\": [\n      \"54b53d3aeba6db5c3500000289a8fbc2bbba4ebc4934bb113588c792\",\n      \"54b53d3aeba6db5c3500000230459d8568ec4bbf675bda2ff05e9293\",\n      \"54b53d3aeba6db5c35000002ec9a2b1aca7b495771273a0895cb3627\",\n      \"54b53d3aeba6db5c3500000272d97a10538248e9523ca09e425090b8\",\n      \"54b53d3aeba6db5c3500000252b5c56c61ad42fe765101f6d70cf9c6\"\n    ]\n  },\n  \"pages\": 1\n}"
										}
									]
								}
							]
						},
						{
							"name": "keys/basic/{username}",
							"item": [
								{
									"name": "Create a Basic Auth User",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_check\": 0,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 0,\n  \"quota_max\": 10000,\n  \"quota_renews\": 1424543479,\n  \"quota_remaining\": 10000,\n  \"quota_renewal_rate\": 2520000,\n  \"access_rights\": {\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"api_name\": \"Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"basic_auth_data\": {\n    \"password\": \"test123\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"keys",
												"basic",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "aute ut Duis Ut",
													"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
												}
											]
										},
										"description": "Create a Basic Auth user with the username specified in the path {username}."
									},
									"response": [
										{
											"name": "User created successfully.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"last_check\": 0,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 0,\n  \"quota_max\": 10000,\n  \"quota_renews\": 1424543479,\n  \"quota_remaining\": 10000,\n  \"quota_renewal_rate\": 2520000,\n  \"access_rights\": {\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"api_name\": \"Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"basic_auth_data\": {\n    \"password\": \"test123\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"keys",
														"basic",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aute ut Duis Ut",
															"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"api_model\": {},\n  \"key_id\": \"54b53d3aeba6db5c3500000test-user\",\n  \"data\": {\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 0,\n    \"quota_max\": 10000,\n    \"quota_renews\": 1424543479,\n    \"quota_remaining\": 10000,\n    \"quota_renewal_rate\": 2520000,\n    \"access_rights\": null,\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_name\": \"Test\",\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"versions\": [\n        \"Default\"\n      ]\n    },\n    \"org_id\": \"54b53d3aeba6db5c35000002\",\n    \"oauth_client_id\": \"\",\n    \"basic_auth_data\": {\n      \"password\": \"\"\n    },\n    \"hmac_enabled\": false,\n    \"hmac_string\": \"\"\n  }\n}"
										}
									]
								},
								{
									"name": "Update a Basic Auth User",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_check\": 0,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 0,\n  \"quota_max\": 10000,\n  \"quota_renews\": 1424543479,\n  \"quota_remaining\": 10000,\n  \"quota_renewal_rate\": 2520000,\n  \"access_rights\": {\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"api_name\": \"Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"basic_auth_data\": {\n    \"password\": \"test123\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"keys",
												"basic",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "aute ut Duis Ut",
													"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
												}
											]
										},
										"description": "Update the Basic Auth user specified in the path {username}."
									},
									"response": [
										{
											"name": "User created successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"last_check\": 0,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 0,\n  \"quota_max\": 10000,\n  \"quota_renews\": 1424543479,\n  \"quota_remaining\": 10000,\n  \"quota_renewal_rate\": 2520000,\n  \"access_rights\": {\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"api_name\": \"Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  },\n  \"basic_auth_data\": {\n    \"password\": \"test123\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"keys",
														"basic",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aute ut Duis Ut",
															"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"api_model\": {},\n  \"key_id\": \"54b53d3aeba6db5c3500000test-user\",\n  \"data\": {\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 0,\n    \"quota_max\": 10000,\n    \"quota_renews\": 1424543479,\n    \"quota_remaining\": 10000,\n    \"quota_renewal_rate\": 2520000,\n    \"access_rights\": null,\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_name\": \"Test\",\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"versions\": [\n        \"Default\"\n      ]\n    },\n    \"org_id\": \"54b53d3aeba6db5c35000002\",\n    \"oauth_client_id\": \"\",\n    \"basic_auth_data\": {\n      \"password\": \"\"\n    },\n    \"hmac_enabled\": false,\n    \"hmac_string\": \"\"\n  }\n}"
										}
									]
								},
								{
									"name": "Get a Basic Auth User",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"keys",
												"basic",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "aute ut Duis Ut",
													"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
												}
											]
										},
										"description": "Get the Basic Auth user specified in the path {username}."
									},
									"response": [
										{
											"name": "User created successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"keys",
														"basic",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aute ut Duis Ut",
															"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"api_model\": {},\n  \"key_id\": \"54b53d3aeba6db5c3500000test-user\",\n  \"data\": {\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 0,\n    \"quota_max\": 10000,\n    \"quota_renews\": 1424543479,\n    \"quota_remaining\": 10000,\n    \"quota_renewal_rate\": 2520000,\n    \"access_rights\": null,\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_name\": \"Test\",\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"versions\": [\n        \"Default\"\n      ]\n    },\n    \"org_id\": \"54b53d3aeba6db5c35000002\",\n    \"oauth_client_id\": \"\",\n    \"basic_auth_data\": {\n      \"password\": \"\",\n      \"hmac_enabled\": false,\n      \"hmac_string\": \"\"\n    }\n  }\n}"
										}
									]
								},
								{
									"name": "Delete a Basic Auth User",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"keys",
												"basic",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "aute ut Duis Ut",
													"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
												}
											]
										},
										"description": "Delete the Basic Auth user specified in the path {username}."
									},
									"response": [
										{
											"name": "User created successfully.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/apis/keys/basic/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"apis",
														"keys",
														"basic",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aute ut Duis Ut",
															"description": "(Required) Username of Basic Auth user to create, get, update, or delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"api_model\": {},\n  \"key_id\": \"54b53d3aeba6db5c3500000test-user\",\n  \"data\": {\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 0,\n    \"quota_max\": 10000,\n    \"quota_renews\": 1424543479,\n    \"quota_remaining\": 10000,\n    \"quota_renewal_rate\": 2520000,\n    \"access_rights\": null,\n    \"bc2f8cfb7ab241504d9f3574fe407499\": {\n      \"api_name\": \"Test\",\n      \"api_id\": \"bc2f8cfb7ab241504d9f3574fe407499\",\n      \"versions\": [\n        \"Default\"\n      ]\n    },\n    \"org_id\": \"54b53d3aeba6db5c35000002\",\n    \"oauth_client_id\": \"\",\n    \"basic_auth_data\": {\n      \"password\": \"\"\n    },\n    \"hmac_enabled\": false,\n    \"hmac_string\": \"\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get List of APIs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"apis"
									]
								},
								"description": "Get List of APIs"
							},
							"response": [
								{
									"name": "List of API definitions",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"tags\": [\n      \"non Excepteur do adipisicing dolor\",\n      \"laborum dolor\"\n    ],\n    \"CORS\": {\n      \"allow_credentials\": true,\n      \"allowed_headers\": [\n        \"a\",\n        \"qui aliqua eiusmod cupidatat\"\n      ],\n      \"allowed_methods\": [\n        \"aute dolore\",\n        \"magna\"\n      ],\n      \"allowed_origins\": [\n        \"tempor in sit\",\n        \"laborum\"\n      ],\n      \"debug\": true,\n      \"enable\": false,\n      \"exposed_headers\": [\n        \"Lorem aliquip mollit\",\n        \"sunt dolor eiusmod fugiat\"\n      ],\n      \"max_age\": -87726922,\n      \"options_passthrough\": true\n    },\n    \"active\": true,\n    \"allowed_ips\": [\n      \"reprehenderit Lorem\",\n      \"fugia\"\n    ],\n    \"api_id\": \"labore mini\",\n    \"auth\": {\n      \"auth_header_name\": \"cupidatat cillu\",\n      \"cookie_name\": \"laboris veniam adipisicing\",\n      \"param_name\": \"aliquip consequat non fugiat\",\n      \"signature\": {\n        \"algorithm\": \"exercit\",\n        \"allowed_clock_skew\": 82910127,\n        \"error_code\": -82470590,\n        \"error_message\": \"nulla ipsum quis Duis\",\n        \"header\": \"consectetur incidi\",\n        \"secret\": \"reprehenderit minim\"\n      },\n      \"use_certificate\": true,\n      \"use_cookie\": true,\n      \"use_param\": false,\n      \"validate_signature\": true\n    },\n    \"auth_provider\": {\n      \"meta\": {\n        \"laborumc\": {},\n        \"veniam_7\": {}\n      },\n      \"name\": \"enim Duis\",\n      \"storage_engine\": \"aute consequat ut occaecat\"\n    },\n    \"base_identity_provided_by\": \"am\",\n    \"basic_auth\": {\n      \"body_password_regexp\": \"fugiat occaecat ex exercitat\",\n      \"body_user_regexp\": \"Ut minim occaecat id\",\n      \"cache_ttl\": -6612576,\n      \"disable_caching\": false,\n      \"extract_from_body\": true\n    },\n    \"blacklisted_ips\": [\n      \"\",\n      \"proident fugiat dolore aute\"\n    ],\n    \"cache_options\": {\n      \"cache_all_safe_requests\": false,\n      \"cache_control_ttl_header\": \"quis commodo Excepteur\",\n      \"cache_response_codes\": [\n        -94324284,\n        -79175398\n      ],\n      \"cache_timeout\": -40688177,\n      \"enable_cache\": true,\n      \"enable_upstream_cache_control\": false\n    },\n    \"certificates\": [\n      \"do proide\",\n      \"proident fugiat nostrud in\"\n    ],\n    \"client_certificates\": [\n      \"voluptate minim\",\n      \"com\"\n    ],\n    \"config_data\": {\n      \"esse5\": {}\n    },\n    \"custom_middleware\": {\n      \"auth_check\": {\n        \"name\": \"id ex aute sint\",\n        \"path\": \"incididunt\",\n        \"require_session\": true\n      },\n      \"driver\": \"in\",\n      \"id_extractor\": {\n        \"extract_from\": \"cupidatat e\",\n        \"extract_with\": \"minim in null\",\n        \"extractor_config\": {\n          \"eu_ccd\": {},\n          \"laboris_ac\": {},\n          \"nostrud_\": {}\n        }\n      },\n      \"post\": [\n        {\n          \"name\": \"nostrud\",\n          \"path\": \"voluptate velit\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"nostrud incididunt\",\n          \"path\": \"tempor eu sunt\",\n          \"require_session\": true\n        }\n      ],\n      \"post_key_auth\": [\n        {\n          \"name\": \"eiusmod ex\",\n          \"path\": \"sint dolor\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"elit ullamco et\",\n          \"path\": \"consequat proident\",\n          \"require_session\": true\n        }\n      ],\n      \"pre\": [\n        {\n          \"name\": \"incididunt exercitation dolore in\",\n          \"path\": \"laborum quis aliqua\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"velit dolore dolor\",\n          \"path\": \"reprehenderit aliquip do\",\n          \"require_session\": false\n        }\n      ],\n      \"response\": [\n        {\n          \"name\": \"Lorem sed do\",\n          \"path\": \"officia dolor sed fugiat\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"Lorem dolor\",\n          \"path\": \"sed dolor culpa\",\n          \"require_session\": false\n        }\n      ]\n    },\n    \"custom_middleware_bundle\": \"dolor in ut ea\",\n    \"definition\": {\n      \"key\": \"in\",\n      \"location\": \"in amet incididunt sunt\",\n      \"strip_path\": false\n    },\n    \"disable_quota\": false,\n    \"disable_rate_limit\": false,\n    \"do_not_track\": true,\n    \"domain\": \"con\",\n    \"dont_set_quota_on_create\": false,\n    \"enable_batch_request_support\": false,\n    \"enable_context_vars\": false,\n    \"enable_coprocess_auth\": false,\n    \"enable_ip_blacklisting\": false,\n    \"enable_ip_whitelisting\": false,\n    \"enable_jwt\": false,\n    \"enable_signature_checking\": false,\n    \"event_handlers\": {\n      \"events\": {}\n    },\n    \"expire_analytics_after\": 77999858,\n    \"global_rate_limit\": {\n      \"per\": 20091759.66758731,\n      \"rate\": 43219593.1279749\n    },\n    \"hmac_allowed_algorithms\": [\n      \"nisi officia\",\n      \"cillum occaecat pariatur\"\n    ],\n    \"hmac_allowed_clock_skew\": -46681719.11210406,\n    \"id\": \"velit veniam ut\",\n    \"internal\": false,\n    \"jwt_client_base_field\": \"mollit do ex\",\n    \"jwt_expires_at_validation_skew\": 41527302,\n    \"jwt_identity_base_field\": \"Excepteur nostrud do\",\n    \"jwt_issued_at_validation_skew\": 7697499,\n    \"jwt_not_before_validation_skew\": 87301906,\n    \"jwt_policy_field_name\": \"veniam\",\n    \"jwt_scope_claim_name\": \"Lorem id Excepteur\",\n    \"jwt_scope_to_policy_mapping\": {\n      \"voluptatedb3\": \"reprehenderit dolor laboris\"\n    },\n    \"jwt_signing_method\": \"do nisi dolor\",\n    \"jwt_skip_kid\": true,\n    \"jwt_source\": \"ex labore quis\",\n    \"name\": \"culpa\",\n    \"notifications\": {\n      \"oauth_on_keychange_url\": \"adipisici\",\n      \"shared_secret\": \"nisi pro\"\n    },\n    \"oauth_meta\": {\n      \"allowed_access_types\": [\n        \"occaecat dolore am\",\n        \"consectetur aute in occaecat consequat\"\n      ],\n      \"allowed_authorize_types\": [\n        \"magna sunt adipisicing labore\",\n        \"minim fugiat anim amet\"\n      ],\n      \"auth_login_redirect\": \"consequat\"\n    },\n    \"openid_options\": {\n      \"providers\": [\n        {\n          \"client_ids\": {\n            \"Duis_9\": \"dolore\",\n            \"aliqua_c\": \"deserunt sint occaecat Ut\"\n          },\n          \"issuer\": \"eu dolore anim\"\n        },\n        {\n          \"client_ids\": {\n            \"Duis_b61\": \"consectetur\"\n          },\n          \"issuer\": \"ea adipisicing velit aliqua\"\n        }\n      ],\n      \"segregate_by_client\": true\n    },\n    \"org_id\": \"in\",\n    \"pinned_public_keys\": {\n      \"mollit7e\": \"elit sed Ut\"\n    },\n    \"proxy\": {\n      \"check_host_against_uptime_tests\": true,\n      \"disable_strip_slash\": true,\n      \"enable_load_balancing\": false,\n      \"listen_path\": \"eu in officia irure\",\n      \"preserve_host_header\": false,\n      \"service_discovery\": {\n        \"cache_timeout\": 73722431,\n        \"data_path\": \"Duis deserunt\",\n        \"endpoint_returns_list\": false,\n        \"parent_data_path\": \"sint id\",\n        \"port_data_path\": \"fugiat veniam ex\",\n        \"query_endpoint\": \"in sunt ut dolore\",\n        \"target_path\": \"volupt\",\n        \"use_discovery_service\": true,\n        \"use_nested_query\": false,\n        \"use_target_list\": true\n      },\n      \"strip_listen_path\": true,\n      \"target_list\": [\n        \"culpa proident\",\n        \"ad est sit dolore\"\n      ],\n      \"target_url\": \"id\",\n      \"transport\": {\n        \"proxy_url\": \"ad ea id\",\n        \"ssl_ciphers\": [\n          \"magna in ipsum\",\n          \"amet nisi\"\n        ],\n        \"ssl_insecure_skip_verify\": false,\n        \"ssl_min_version\": 99696366\n      }\n    },\n    \"response_processors\": [\n      {\n        \"name\": \"tempor cillum minim\",\n        \"options\": {}\n      },\n      {\n        \"name\": \"et sit sint\",\n        \"options\": {}\n      }\n    ],\n    \"session_lifetime\": -41012468,\n    \"session_provider\": {\n      \"meta\": {\n        \"nulla0\": {}\n      },\n      \"name\": \"amet sed et\",\n      \"storage_engine\": \"cillum elit occaecat proident in\"\n    },\n    \"slug\": \"et sed\",\n    \"strip_auth_data\": false,\n    \"tag_headers\": [\n      \"aute sit ut ea\",\n      \"commodo ex\"\n    ],\n    \"upstream_certificates\": {\n      \"sint_a\": \"cupidatat est\",\n      \"elit_2\": \"labore do irure\"\n    },\n    \"uptime_tests\": {\n      \"check_list\": [\n        {\n          \"body\": \"sunt\",\n          \"headers\": {\n            \"proident_de\": \"commodo labore\",\n            \"magna_22_\": \"pariatur ad commodo\"\n          },\n          \"method\": \"quis\",\n          \"url\": \"reprehenderit deserunt laborum in culpa\"\n        },\n        {\n          \"body\": \"in nulla adipisicing\",\n          \"headers\": {\n            \"non_e\": \"sed\",\n            \"ipsum16a\": \"aliqua aliquip do eiusmod sint\"\n          },\n          \"method\": \"magna consectetur\",\n          \"url\": \"minim aliquip nisi ex\"\n        }\n      ],\n      \"config\": {\n        \"expire_utime_after\": 74279707,\n        \"recheck_wait\": 48639094,\n        \"service_discovery\": {\n          \"cache_timeout\": -4029122,\n          \"data_path\": \"dolor enim\",\n          \"endpoint_returns_list\": false,\n          \"parent_data_path\": \"reprehenderit commodo sint exercitation mollit\",\n          \"port_data_path\": \"aliquip dolor dolor sed\",\n          \"query_endpoint\": \"exercitation\",\n          \"target_path\": \"minim qui nostrud\",\n          \"use_discovery_service\": false,\n          \"use_nested_query\": true,\n          \"use_target_list\": true\n        }\n      }\n    },\n    \"use_basic_auth\": false,\n    \"use_keyless\": true,\n    \"use_mutual_tls_auth\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": true,\n    \"use_standard_auth\": true,\n    \"version_data\": {\n      \"default_version\": \"occaecat sed\",\n      \"not_versioned\": false,\n      \"versions\": {\n        \"fugiat0b\": {\n          \"paths\": {\n            \"black_list\": [\n              \"sunt Lorem est\",\n              \"sunt Lorem\"\n            ],\n            \"ignored\": [\n              \"nulla Lorem\",\n              \"exercitation aute\"\n            ],\n            \"white_list\": [\n              \"dolore dolor laboris Duis dolor\",\n              \"fugiat nostrud id Excepteur\"\n            ]\n          },\n          \"expires\": \"qui non Ut ut aliquip\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"culpa_62\": \"pariatur officia consequat\"\n          },\n          \"global_headers_remove\": [\n            \"deserunt\",\n            \"adipisicing fugiat consectetur\"\n          ],\n          \"global_size_limit\": 81548904,\n          \"name\": \"in labor\",\n          \"override_target\": \"ad laborum minim\",\n          \"use_extended_paths\": false\n        },\n        \"inb3a\": {\n          \"paths\": {\n            \"black_list\": [\n              \"esse consectetur qui ipsum sint\",\n              \"dolore in\"\n            ],\n            \"ignored\": [\n              \"velit\",\n              \"dolor ex Lorem irure\"\n            ],\n            \"white_list\": [\n              \"nulla voluptate\",\n              \"voluptate dolore\"\n            ]\n          },\n          \"expires\": \"amet aliqua ullamco non\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"veniamee\": \"qui id amet elit ut\",\n            \"proident_c\": \"exercitation cupidatat sint irure ad\",\n            \"et_d\": \"esse ullamco nulla\"\n          },\n          \"global_headers_remove\": [\n            \"sunt ex ad\",\n            \"amet minim nisi\"\n          ],\n          \"global_size_limit\": -23869588,\n          \"name\": \"culpa amet sint\",\n          \"override_target\": \"dolor sed\",\n          \"use_extended_paths\": true\n        }\n      }\n    }\n  },\n  {\n    \"tags\": [\n      \"aliqua nisi sint\",\n      \"pariatur\"\n    ],\n    \"CORS\": {\n      \"allow_credentials\": true,\n      \"allowed_headers\": [\n        \"consectetur volupt\",\n        \"pariatur aliqua do in eu\"\n      ],\n      \"allowed_methods\": [\n        \"Duis aliquip do voluptate\",\n        \"Excepteur\"\n      ],\n      \"allowed_origins\": [\n        \"nisi ad mo\",\n        \"magna aliqua\"\n      ],\n      \"debug\": false,\n      \"enable\": true,\n      \"exposed_headers\": [\n        \"laborum Duis cupidatat\",\n        \"in aliqua minim labore\"\n      ],\n      \"max_age\": -16988371,\n      \"options_passthrough\": false\n    },\n    \"active\": false,\n    \"allowed_ips\": [\n      \"enim mollit proident\",\n      \"pariatur ad\"\n    ],\n    \"api_id\": \"sunt aute in\",\n    \"auth\": {\n      \"auth_header_name\": \"laboris dolor\",\n      \"cookie_name\": \"ea et velit\",\n      \"param_name\": \"consequat consectetur ea laborum\",\n      \"signature\": {\n        \"algorithm\": \"in\",\n        \"allowed_clock_skew\": 75388064,\n        \"error_code\": 46327282,\n        \"error_message\": \"cillum aliquip\",\n        \"header\": \"nisi Ut elit deserunt\",\n        \"secret\": \"ex\"\n      },\n      \"use_certificate\": true,\n      \"use_cookie\": false,\n      \"use_param\": true,\n      \"validate_signature\": true\n    },\n    \"auth_provider\": {\n      \"meta\": {\n        \"dolor_2\": {},\n        \"eue19\": {}\n      },\n      \"name\": \"tempor ullamco exercitation\",\n      \"storage_engine\": \"officia veniam\"\n    },\n    \"base_identity_provided_by\": \"amet veniam\",\n    \"basic_auth\": {\n      \"body_password_regexp\": \"nostrud aliquip\",\n      \"body_user_regexp\": \"quis cillum ullamco\",\n      \"cache_ttl\": 15067391,\n      \"disable_caching\": true,\n      \"extract_from_body\": false\n    },\n    \"blacklisted_ips\": [\n      \"Excepteur nisi exercitation ex\",\n      \"reprehenderit Ut consectetur dolor\"\n    ],\n    \"cache_options\": {\n      \"cache_all_safe_requests\": false,\n      \"cache_control_ttl_header\": \"anim ea incididunt dolor\",\n      \"cache_response_codes\": [\n        7235503,\n        47150773\n      ],\n      \"cache_timeout\": 87438049,\n      \"enable_cache\": false,\n      \"enable_upstream_cache_control\": true\n    },\n    \"certificates\": [\n      \"et quis nisi e\",\n      \"incididunt enim quis exercitation eu\"\n    ],\n    \"client_certificates\": [\n      \"veniam adipisicing amet cupidatat Duis\",\n      \"amet laborum\"\n    ],\n    \"config_data\": {\n      \"cupidatat_c\": {},\n      \"ipsum_757\": {},\n      \"ad87\": {},\n      \"consequat_b4\": {},\n      \"in_6\": {}\n    },\n    \"custom_middleware\": {\n      \"auth_check\": {\n        \"name\": \"in eiusmod\",\n        \"path\": \"consectetur enim d\",\n        \"require_session\": true\n      },\n      \"driver\": \"laborum dolor occaecat\",\n      \"id_extractor\": {\n        \"extract_from\": \"aliqua Lorem\",\n        \"extract_with\": \"adipisicing sint sunt\",\n        \"extractor_config\": {\n          \"dolor503\": {},\n          \"in_5b\": {}\n        }\n      },\n      \"post\": [\n        {\n          \"name\": \"ut dolore\",\n          \"path\": \"eu\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"sit\",\n          \"path\": \"eu tempor\",\n          \"require_session\": false\n        }\n      ],\n      \"post_key_auth\": [\n        {\n          \"name\": \"aliquip eiusmod\",\n          \"path\": \"labore Excepteur dolor do sit\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"exercitation aute quis tempor eu\",\n          \"path\": \"irure cillum\",\n          \"require_session\": true\n        }\n      ],\n      \"pre\": [\n        {\n          \"name\": \"sed sit\",\n          \"path\": \"proident\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"ex id\",\n          \"path\": \"fugiat officia\",\n          \"require_session\": false\n        }\n      ],\n      \"response\": [\n        {\n          \"name\": \"ea\",\n          \"path\": \"occaecat ut elit id\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"dolor\",\n          \"path\": \"et laborum qu\",\n          \"require_session\": true\n        }\n      ]\n    },\n    \"custom_middleware_bundle\": \"consectetur eu nostrud dolore\",\n    \"definition\": {\n      \"key\": \"veniam\",\n      \"location\": \"dolor veniam\",\n      \"strip_path\": true\n    },\n    \"disable_quota\": false,\n    \"disable_rate_limit\": false,\n    \"do_not_track\": true,\n    \"domain\": \"occaecat aliquip exercitation voluptate deseru\",\n    \"dont_set_quota_on_create\": true,\n    \"enable_batch_request_support\": false,\n    \"enable_context_vars\": true,\n    \"enable_coprocess_auth\": true,\n    \"enable_ip_blacklisting\": true,\n    \"enable_ip_whitelisting\": true,\n    \"enable_jwt\": true,\n    \"enable_signature_checking\": false,\n    \"event_handlers\": {\n      \"events\": {}\n    },\n    \"expire_analytics_after\": -21677708,\n    \"global_rate_limit\": {\n      \"per\": 76133098.3672393,\n      \"rate\": 10875188.431291297\n    },\n    \"hmac_allowed_algorithms\": [\n      \"aliqua incididunt dolor dolor\",\n      \"anim et Duis\"\n    ],\n    \"hmac_allowed_clock_skew\": 95694496.4789483,\n    \"id\": \"sit anim id vo\",\n    \"internal\": false,\n    \"jwt_client_base_field\": \"minim\",\n    \"jwt_expires_at_validation_skew\": -76127575,\n    \"jwt_identity_base_field\": \"labore dolore Ut\",\n    \"jwt_issued_at_validation_skew\": 3707827,\n    \"jwt_not_before_validation_skew\": 45693196,\n    \"jwt_policy_field_name\": \"dolor nisi ullamco laborum\",\n    \"jwt_scope_claim_name\": \"laboris anim Duis laborum\",\n    \"jwt_scope_to_policy_mapping\": {\n      \"labore_a1\": \"voluptate\",\n      \"commodo_091\": \"ullamco\",\n      \"veniam_6\": \"dolore commodo ipsum dolor\",\n      \"magnaf58\": \"velit labor\"\n    },\n    \"jwt_signing_method\": \"ut aliqua sit et Lorem\",\n    \"jwt_skip_kid\": true,\n    \"jwt_source\": \"tempor\",\n    \"name\": \"do enim anim laboris\",\n    \"notifications\": {\n      \"oauth_on_keychange_url\": \"ea\",\n      \"shared_secret\": \"minim labore\"\n    },\n    \"oauth_meta\": {\n      \"allowed_access_types\": [\n        \"in et ex Ut tempor\",\n        \"Excepteur non in\"\n      ],\n      \"allowed_authorize_types\": [\n        \"nisi in aute\",\n        \"nostrud velit qui\"\n      ],\n      \"auth_login_redirect\": \"mol\"\n    },\n    \"openid_options\": {\n      \"providers\": [\n        {\n          \"client_ids\": {\n            \"voluptate92\": \"voluptate amet eiusmod ut\",\n            \"labore_8a\": \"anim ut enim\"\n          },\n          \"issuer\": \"dolore minim ullamco anim\"\n        },\n        {\n          \"client_ids\": {\n            \"ea_10\": \"ut ipsum\"\n          },\n          \"issuer\": \"in veniam\"\n        }\n      ],\n      \"segregate_by_client\": true\n    },\n    \"org_id\": \"ullamco dolor\",\n    \"pinned_public_keys\": {\n      \"ut_d2a\": \"laboris amet\"\n    },\n    \"proxy\": {\n      \"check_host_against_uptime_tests\": true,\n      \"disable_strip_slash\": false,\n      \"enable_load_balancing\": false,\n      \"listen_path\": \"mollit voluptate pariatur\",\n      \"preserve_host_header\": false,\n      \"service_discovery\": {\n        \"cache_timeout\": 51673871,\n        \"data_path\": \"eu magna officia consequat\",\n        \"endpoint_returns_list\": true,\n        \"parent_data_path\": \"quis tempor\",\n        \"port_data_path\": \"et tempor incididunt minim\",\n        \"query_endpoint\": \"dolore d\",\n        \"target_path\": \"est\",\n        \"use_discovery_service\": false,\n        \"use_nested_query\": true,\n        \"use_target_list\": true\n      },\n      \"strip_listen_path\": true,\n      \"target_list\": [\n        \"tempor ut cupidatat sed\",\n        \"minim commodo in consequat\"\n      ],\n      \"target_url\": \"pariatur non quis id\",\n      \"transport\": {\n        \"proxy_url\": \"Duis nulla cillum Ut non\",\n        \"ssl_ciphers\": [\n          \"dolore fugiat cupidatat\",\n          \"velit laboris sit quis\"\n        ],\n        \"ssl_insecure_skip_verify\": true,\n        \"ssl_min_version\": 379001\n      }\n    },\n    \"response_processors\": [\n      {\n        \"name\": \"anim aliquip\",\n        \"options\": {}\n      },\n      {\n        \"name\": \"dolore dolore labore sed\",\n        \"options\": {}\n      }\n    ],\n    \"session_lifetime\": -55963180,\n    \"session_provider\": {\n      \"meta\": {\n        \"deserunt_f\": {}\n      },\n      \"name\": \"cillum eu ipsum\",\n      \"storage_engine\": \"dolore\"\n    },\n    \"slug\": \"ullamco aute\",\n    \"strip_auth_data\": true,\n    \"tag_headers\": [\n      \"tempor deserunt\",\n      \"in anim esse fugiat sed\"\n    ],\n    \"upstream_certificates\": {\n      \"aliquaff\": \"fugiat nostrud tempor occaecat ullamco\"\n    },\n    \"uptime_tests\": {\n      \"check_list\": [\n        {\n          \"body\": \"sed\",\n          \"headers\": {\n            \"laborum_76\": \"reprehenderit\",\n            \"et29\": \"id in labor\"\n          },\n          \"method\": \"dolor\",\n          \"url\": \"anim irure in sunt\"\n        },\n        {\n          \"body\": \"in dolor id\",\n          \"headers\": {\n            \"dolorea\": \"es\"\n          },\n          \"method\": \"nulla dolor enim\",\n          \"url\": \"ullamco occaecat\"\n        }\n      ],\n      \"config\": {\n        \"expire_utime_after\": -87612607,\n        \"recheck_wait\": -70253615,\n        \"service_discovery\": {\n          \"cache_timeout\": 11482141,\n          \"data_path\": \"no\",\n          \"endpoint_returns_list\": false,\n          \"parent_data_path\": \"\",\n          \"port_data_path\": \"consectetur cupidatat culpa\",\n          \"query_endpoint\": \"veniam\",\n          \"target_path\": \"sit aliquip\",\n          \"use_discovery_service\": false,\n          \"use_nested_query\": true,\n          \"use_target_list\": true\n        }\n      }\n    },\n    \"use_basic_auth\": false,\n    \"use_keyless\": true,\n    \"use_mutual_tls_auth\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": true,\n    \"use_standard_auth\": false,\n    \"version_data\": {\n      \"default_version\": \"veniam \",\n      \"not_versioned\": true,\n      \"versions\": {\n        \"dolore_a\": {\n          \"paths\": {\n            \"black_list\": [\n              \"incididunt dolore proident do reprehenderit\",\n              \"sit proident voluptate sunt\"\n            ],\n            \"ignored\": [\n              \"consectetur ut Excepteur do\",\n              \"est dolor quis ut culpa\"\n            ],\n            \"white_list\": [\n              \"et in\",\n              \"Duis anim in\"\n            ]\n          },\n          \"expires\": \"q\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"et_8\": \"aliquip nisi aute\",\n            \"irure_0b6\": \"ad laboris\"\n          },\n          \"global_headers_remove\": [\n            \"ipsum et\",\n            \"culpa eiusmod dolor proident adipisicing\"\n          ],\n          \"global_size_limit\": -12726042,\n          \"name\": \"in mollit et\",\n          \"override_target\": \"amet irure quis minim\",\n          \"use_extended_paths\": true\n        },\n        \"tempor42b\": {\n          \"paths\": {\n            \"black_list\": [\n              \"sunt sint\",\n              \"sit dolore exercitation id\"\n            ],\n            \"ignored\": [\n              \"voluptate Excepteur Lorem et\",\n              \"mollit\"\n            ],\n            \"white_list\": [\n              \"ea commodo mollit dolore dolor\",\n              \"dolore veniam cillum\"\n            ]\n          },\n          \"expires\": \"dolore deserunt magna\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"cupidatat_9\": \"Lorem\"\n          },\n          \"global_headers_remove\": [\n            \"Ut proident\",\n            \"ex minim dolore est enim\"\n          ],\n          \"global_size_limit\": 93126339,\n          \"name\": \"nostrud in sunt sint dolore\",\n          \"override_target\": \"sed irure in Ut\",\n          \"use_extended_paths\": false\n        }\n      }\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "Create API Definition",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"api_definition\": null,\n  \"name\": \"Test\",\n  \"auth\": {\n    \"auth_header_name\": \"authorization\"\n  },\n  \"definition\": {\n    \"location\": \"header\",\n    \"key\": \"\"\n  },\n  \"proxy\": {\n    \"target_url\": \"http://httpbin.org/\"\n  },\n  \"version_data\": {\n    \"use_extended_paths\": true,\n    \"not_versioned\": true,\n    \"versions\": {\n      \"Default\": {\n        \"expires\": \"\",\n        \"name\": \"Default\",\n        \"paths\": {\n          \"ignored\": [],\n          \"white_list\": [],\n          \"black_list\": []\n        },\n        \"extended_paths\": {\n          \"ignored\": [\n            {\n              \"path\": \"/test-path/\",\n              \"method_actions\": {\n                \"GET\": {\n                  \"action\": \"no_action\",\n                  \"code\": 200,\n                  \"data\": \"\",\n                  \"headers\": {}\n                }\n              }\n            },\n            {\n              \"path\": \"/test-path/reply\",\n              \"method_actions\": {\n                \"GET\": {\n                  \"action\": \"reply\",\n                  \"code\": 200,\n                  \"data\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n                  \"headers\": {\n                    \"x-test\": \"test\"\n                  }\n                }\n              }\n            }\n          ],\n          \"white_list\": [],\n          \"black_list\": []\n        },\n        \"use_extended_paths\": true\n      }\n    }\n  },\n  \"use_oauth2\": false,\n  \"oauth_meta\": {\n    \"auth_login_redirect\": \"\",\n    \"allowed_access_types\": [],\n    \"allowed_authorize_types\": [\n      \"token\"\n    ]\n  },\n  \"notifications\": {\n    \"shared_secret\": \"\",\n    \"oauth_on_keychange_url\": \"\"\n  },\n  \"enable_ip_whitelisting\": true,\n  \"allowed_ips\": [\n    \"127.0.0.1\"\n  ],\n  \"use_keyless\": false,\n  \"enable_signature_checking\": false,\n  \"use_basic_auth\": false,\n  \"active\": true,\n  \"enable_batch_request_support\": true,\n  \"hook_references\": [\n    {\n      \"event_name\": \"QuotaExceeded\",\n      \"hook\": {\n        \"api_model\": {},\n        \"id\": \"54be6c0beba6db07a6000002\",\n        \"org_id\": \"54b53d3aeba6db5c35000002\",\n        \"name\": \"Test Post\",\n        \"method\": \"POST\",\n        \"target_path\": \"http://httpbin.org/post\",\n        \"template_path\": \"\",\n        \"header_map\": {\n          \"x-tyk-test\": \"123456\"\n        },\n        \"event_timeout\": 0\n      },\n      \"event_timeout\": 60\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"apis"
									]
								},
								"description": "Create an API Definition. The id and api_id fields in the definition are auto-generated by Tyk and cannot be set by the user."
							},
							"response": [
								{
									"name": "API created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"api_definition\": null,\n  \"name\": \"Test\",\n  \"auth\": {\n    \"auth_header_name\": \"authorization\"\n  },\n  \"definition\": {\n    \"location\": \"header\",\n    \"key\": \"\"\n  },\n  \"proxy\": {\n    \"target_url\": \"http://httpbin.org/\"\n  },\n  \"version_data\": {\n    \"use_extended_paths\": true,\n    \"not_versioned\": true,\n    \"versions\": {\n      \"Default\": {\n        \"expires\": \"\",\n        \"name\": \"Default\",\n        \"paths\": {\n          \"ignored\": [],\n          \"white_list\": [],\n          \"black_list\": []\n        },\n        \"extended_paths\": {\n          \"ignored\": [\n            {\n              \"path\": \"/test-path/\",\n              \"method_actions\": {\n                \"GET\": {\n                  \"action\": \"no_action\",\n                  \"code\": 200,\n                  \"data\": \"\",\n                  \"headers\": {}\n                }\n              }\n            },\n            {\n              \"path\": \"/test-path/reply\",\n              \"method_actions\": {\n                \"GET\": {\n                  \"action\": \"reply\",\n                  \"code\": 200,\n                  \"data\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n                  \"headers\": {\n                    \"x-test\": \"test\"\n                  }\n                }\n              }\n            }\n          ],\n          \"white_list\": [],\n          \"black_list\": []\n        },\n        \"use_extended_paths\": true\n      }\n    }\n  },\n  \"use_oauth2\": false,\n  \"oauth_meta\": {\n    \"auth_login_redirect\": \"\",\n    \"allowed_access_types\": [],\n    \"allowed_authorize_types\": [\n      \"token\"\n    ]\n  },\n  \"notifications\": {\n    \"shared_secret\": \"\",\n    \"oauth_on_keychange_url\": \"\"\n  },\n  \"enable_ip_whitelisting\": true,\n  \"allowed_ips\": [\n    \"127.0.0.1\"\n  ],\n  \"use_keyless\": false,\n  \"enable_signature_checking\": false,\n  \"use_basic_auth\": false,\n  \"active\": true,\n  \"enable_batch_request_support\": true,\n  \"hook_references\": [\n    {\n      \"event_name\": \"QuotaExceeded\",\n      \"hook\": {\n        \"api_model\": {},\n        \"id\": \"54be6c0beba6db07a6000002\",\n        \"org_id\": \"54b53d3aeba6db5c35000002\",\n        \"name\": \"Test Post\",\n        \"method\": \"POST\",\n        \"target_path\": \"http://httpbin.org/post\",\n        \"template_path\": \"\",\n        \"header_map\": {\n          \"x-tyk-test\": \"123456\"\n        },\n        \"event_timeout\": 0\n      },\n      \"event_timeout\": 60\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/apis",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"ok\",\n  \"action\": \"created\",\n  \"key\": \"{...API JSON definition...}\"\n}"
								},
								{
									"name": "Malformed data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"api_definition\": null,\n  \"name\": \"Test\",\n  \"auth\": {\n    \"auth_header_name\": \"authorization\"\n  },\n  \"definition\": {\n    \"location\": \"header\",\n    \"key\": \"\"\n  },\n  \"proxy\": {\n    \"target_url\": \"http://httpbin.org/\"\n  },\n  \"version_data\": {\n    \"use_extended_paths\": true,\n    \"not_versioned\": true,\n    \"versions\": {\n      \"Default\": {\n        \"expires\": \"\",\n        \"name\": \"Default\",\n        \"paths\": {\n          \"ignored\": [],\n          \"white_list\": [],\n          \"black_list\": []\n        },\n        \"extended_paths\": {\n          \"ignored\": [\n            {\n              \"path\": \"/test-path/\",\n              \"method_actions\": {\n                \"GET\": {\n                  \"action\": \"no_action\",\n                  \"code\": 200,\n                  \"data\": \"\",\n                  \"headers\": {}\n                }\n              }\n            },\n            {\n              \"path\": \"/test-path/reply\",\n              \"method_actions\": {\n                \"GET\": {\n                  \"action\": \"reply\",\n                  \"code\": 200,\n                  \"data\": \"{\\\"foo\\\":\\\"bar\\\"}\",\n                  \"headers\": {\n                    \"x-test\": \"test\"\n                  }\n                }\n              }\n            }\n          ],\n          \"white_list\": [],\n          \"black_list\": []\n        },\n        \"use_extended_paths\": true\n      }\n    }\n  },\n  \"use_oauth2\": false,\n  \"oauth_meta\": {\n    \"auth_login_redirect\": \"\",\n    \"allowed_access_types\": [],\n    \"allowed_authorize_types\": [\n      \"token\"\n    ]\n  },\n  \"notifications\": {\n    \"shared_secret\": \"\",\n    \"oauth_on_keychange_url\": \"\"\n  },\n  \"enable_ip_whitelisting\": true,\n  \"allowed_ips\": [\n    \"127.0.0.1\"\n  ],\n  \"use_keyless\": false,\n  \"enable_signature_checking\": false,\n  \"use_basic_auth\": false,\n  \"active\": true,\n  \"enable_batch_request_support\": true,\n  \"hook_references\": [\n    {\n      \"event_name\": \"QuotaExceeded\",\n      \"hook\": {\n        \"api_model\": {},\n        \"id\": \"54be6c0beba6db07a6000002\",\n        \"org_id\": \"54b53d3aeba6db5c35000002\",\n        \"name\": \"Test Post\",\n        \"method\": \"POST\",\n        \"target_path\": \"http://httpbin.org/post\",\n        \"template_path\": \"\",\n        \"header_map\": {\n          \"x-tyk-test\": \"123456\"\n        },\n        \"event_timeout\": 0\n      },\n      \"event_timeout\": 60\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/apis",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"error\",\n  \"message\": \"Malformed API data\"\n}"
								}
							]
						},
						{
							"name": "Search List of APIs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/apis/search?q=aute ut Duis Ut",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"apis",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "aute ut Duis Ut",
											"description": "Search query"
										}
									]
								},
								"description": "Search List of APIs"
							},
							"response": [
								{
									"name": "List of API definitions",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/apis/search?q=aute ut Duis Ut",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"apis",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "aute ut Duis Ut"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"tags\": [\n      \"commodo et laborum\",\n      \"aliqua in ut eiusmod sed\"\n    ],\n    \"CORS\": {\n      \"allow_credentials\": true,\n      \"allowed_headers\": [\n        \"ut dolore\",\n        \"sint non\"\n      ],\n      \"allowed_methods\": [\n        \"in officia\",\n        \"dolore\"\n      ],\n      \"allowed_origins\": [\n        \"dolore\",\n        \"tempor dolor\"\n      ],\n      \"debug\": false,\n      \"enable\": false,\n      \"exposed_headers\": [\n        \"officia\",\n        \"in Duis\"\n      ],\n      \"max_age\": -3094059,\n      \"options_passthrough\": true\n    },\n    \"active\": true,\n    \"allowed_ips\": [\n      \"reprehenderit\",\n      \"irure ad commodo Excepteur\"\n    ],\n    \"api_id\": \"sit in labore\",\n    \"auth\": {\n      \"auth_header_name\": \"eiusmod ad commodo\",\n      \"cookie_name\": \"ullamco\",\n      \"param_name\": \"sit\",\n      \"signature\": {\n        \"algorithm\": \"ex do eu reprehenderit\",\n        \"allowed_clock_skew\": -84970268,\n        \"error_code\": 29894487,\n        \"error_message\": \"nulla in ad non sint\",\n        \"header\": \"labore aute\",\n        \"secret\": \"Ut elit\"\n      },\n      \"use_certificate\": true,\n      \"use_cookie\": false,\n      \"use_param\": true,\n      \"validate_signature\": false\n    },\n    \"auth_provider\": {\n      \"meta\": {\n        \"inf\": {}\n      },\n      \"name\": \"fugia\",\n      \"storage_engine\": \"sint ex\"\n    },\n    \"base_identity_provided_by\": \"pariatur et deserunt sunt\",\n    \"basic_auth\": {\n      \"body_password_regexp\": \"in\",\n      \"body_user_regexp\": \"cillum dolore amet do\",\n      \"cache_ttl\": 76987275,\n      \"disable_caching\": false,\n      \"extract_from_body\": false\n    },\n    \"blacklisted_ips\": [\n      \"ullamco in veniam\",\n      \"in e\"\n    ],\n    \"cache_options\": {\n      \"cache_all_safe_requests\": true,\n      \"cache_control_ttl_header\": \"non laboris aliquip minim\",\n      \"cache_response_codes\": [\n        -18623453,\n        23736617\n      ],\n      \"cache_timeout\": 97682760,\n      \"enable_cache\": true,\n      \"enable_upstream_cache_control\": true\n    },\n    \"certificates\": [\n      \"aliqua\",\n      \"officia tempor proident\"\n    ],\n    \"client_certificates\": [\n      \"in\",\n      \"ut deserunt\"\n    ],\n    \"config_data\": {\n      \"in98\": {},\n      \"anim_a\": {},\n      \"laborec9\": {}\n    },\n    \"custom_middleware\": {\n      \"auth_check\": {\n        \"name\": \"sint nisi ex Excepteur\",\n        \"path\": \"dolor cupidatat proident\",\n        \"require_session\": false\n      },\n      \"driver\": \"Duis dolor sunt\",\n      \"id_extractor\": {\n        \"extract_from\": \"Lorem ullamco\",\n        \"extract_with\": \"do consequat\",\n        \"extractor_config\": {\n          \"aliquip_1e4\": {}\n        }\n      },\n      \"post\": [\n        {\n          \"name\": \"ad sit\",\n          \"path\": \"nulla esse voluptate fugiat\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"irure dolore\",\n          \"path\": \"nisi et ipsum ut\",\n          \"require_session\": false\n        }\n      ],\n      \"post_key_auth\": [\n        {\n          \"name\": \"commodo nostrud nulla sunt ea\",\n          \"path\": \"elit deserunt\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"elit c\",\n          \"path\": \"nisi\",\n          \"require_session\": true\n        }\n      ],\n      \"pre\": [\n        {\n          \"name\": \"in elit nulla reprehenderit\",\n          \"path\": \"non anim exercitation nostrud\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"an\",\n          \"path\": \"consequat\",\n          \"require_session\": false\n        }\n      ],\n      \"response\": [\n        {\n          \"name\": \"Lorem velit ut eiusmod\",\n          \"path\": \"do exercitation eu\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"ut velit deserunt consectetur\",\n          \"path\": \"cillum nostru\",\n          \"require_session\": false\n        }\n      ]\n    },\n    \"custom_middleware_bundle\": \"dolor ullamco exercitation\",\n    \"definition\": {\n      \"key\": \"non ad ea\",\n      \"location\": \"Lorem laborum nostrud consectetur\",\n      \"strip_path\": false\n    },\n    \"disable_quota\": true,\n    \"disable_rate_limit\": false,\n    \"do_not_track\": false,\n    \"domain\": \"deserunt\",\n    \"dont_set_quota_on_create\": false,\n    \"enable_batch_request_support\": true,\n    \"enable_context_vars\": false,\n    \"enable_coprocess_auth\": false,\n    \"enable_ip_blacklisting\": false,\n    \"enable_ip_whitelisting\": false,\n    \"enable_jwt\": false,\n    \"enable_signature_checking\": false,\n    \"event_handlers\": {\n      \"events\": {}\n    },\n    \"expire_analytics_after\": -31293271,\n    \"global_rate_limit\": {\n      \"per\": 72576623.44876415,\n      \"rate\": -10458020.563753396\n    },\n    \"hmac_allowed_algorithms\": [\n      \"dolor\",\n      \"proident labore dolor\"\n    ],\n    \"hmac_allowed_clock_skew\": 20691352.49469465,\n    \"id\": \"ut\",\n    \"internal\": false,\n    \"jwt_client_base_field\": \"sunt anim sed\",\n    \"jwt_expires_at_validation_skew\": -21603453,\n    \"jwt_identity_base_field\": \"ut Duis dolore nostrud tempor\",\n    \"jwt_issued_at_validation_skew\": -44456928,\n    \"jwt_not_before_validation_skew\": 36499533,\n    \"jwt_policy_field_name\": \"laborum incididunt\",\n    \"jwt_scope_claim_name\": \"tempor sit cupidatat ea\",\n    \"jwt_scope_to_policy_mapping\": {\n      \"tempora\": \"sint\",\n      \"sed_131\": \"pariatur in dolore tempor elit\"\n    },\n    \"jwt_signing_method\": \"ut dolor mollit consequat\",\n    \"jwt_skip_kid\": true,\n    \"jwt_source\": \"ex labore aliqua quis\",\n    \"name\": \"in magna pariatur\",\n    \"notifications\": {\n      \"oauth_on_keychange_url\": \"Ut qui\",\n      \"shared_secret\": \"consequat laborum irure ea\"\n    },\n    \"oauth_meta\": {\n      \"allowed_access_types\": [\n        \"officia aliqua cupidatat dolore\",\n        \"Excepteur nisi cupidatat\"\n      ],\n      \"allowed_authorize_types\": [\n        \"elit deserunt Ut\",\n        \"reprehenderit aute nisi\"\n      ],\n      \"auth_login_redirect\": \"consec\"\n    },\n    \"openid_options\": {\n      \"providers\": [\n        {\n          \"client_ids\": {\n            \"laboreb\": \"tempor est quis\",\n            \"sunt_d\": \"qui proident conse\",\n            \"anim_e5\": \"Lorem ex\",\n            \"utf71\": \"culpa reprehenderit veli\"\n          },\n          \"issuer\": \"veniam irure se\"\n        },\n        {\n          \"client_ids\": {\n            \"Lorem_d68\": \"sit nisi do mollit Excepteur\",\n            \"reprehenderit_c\": \"est sit la\",\n            \"cillum_39\": \"Lorem velit magna\",\n            \"eiusmod4\": \"enim dolore reprehenderit in\"\n          },\n          \"issuer\": \"dolore sit aliqua e\"\n        }\n      ],\n      \"segregate_by_client\": false\n    },\n    \"org_id\": \"fugiat esse\",\n    \"pinned_public_keys\": {\n      \"tempor_b_\": \"culp\",\n      \"Excepteur_0\": \"consequat quis\",\n      \"id_22\": \"qui tempor\",\n      \"consectetur_d00\": \"velit enim Ut aliqua in\",\n      \"nostrud37\": \"nisi ex est irure\"\n    },\n    \"proxy\": {\n      \"check_host_against_uptime_tests\": false,\n      \"disable_strip_slash\": true,\n      \"enable_load_balancing\": false,\n      \"listen_path\": \"veniam incididunt sit labore quis\",\n      \"preserve_host_header\": true,\n      \"service_discovery\": {\n        \"cache_timeout\": 58852219,\n        \"data_path\": \"eu el\",\n        \"endpoint_returns_list\": false,\n        \"parent_data_path\": \"magna sunt consequat labore\",\n        \"port_data_path\": \"adipisicing\",\n        \"query_endpoint\": \"Ut velit mollit nisi\",\n        \"target_path\": \"commodo reprehenderit v\",\n        \"use_discovery_service\": true,\n        \"use_nested_query\": false,\n        \"use_target_list\": false\n      },\n      \"strip_listen_path\": false,\n      \"target_list\": [\n        \"reprehenderit\",\n        \"Ut\"\n      ],\n      \"target_url\": \"Duis ut ad cillum\",\n      \"transport\": {\n        \"proxy_url\": \"veniam dolor\",\n        \"ssl_ciphers\": [\n          \"ipsum officia\",\n          \"laborum eiusmod in elit commodo\"\n        ],\n        \"ssl_insecure_skip_verify\": true,\n        \"ssl_min_version\": -30189567\n      }\n    },\n    \"response_processors\": [\n      {\n        \"name\": \"elit fugiat in sit\",\n        \"options\": {}\n      },\n      {\n        \"name\": \"ea\",\n        \"options\": {}\n      }\n    ],\n    \"session_lifetime\": -91171070,\n    \"session_provider\": {\n      \"meta\": {\n        \"nulla00e\": {},\n        \"quis_81\": {}\n      },\n      \"name\": \"ut\",\n      \"storage_engine\": \"dolor ea labore\"\n    },\n    \"slug\": \"in dolore aute\",\n    \"strip_auth_data\": false,\n    \"tag_headers\": [\n      \"proident minim\",\n      \"reprehenderit labore\"\n    ],\n    \"upstream_certificates\": {\n      \"aliquip5\": \"ullamco i\",\n      \"consequat_207\": \"laboris Duis\"\n    },\n    \"uptime_tests\": {\n      \"check_list\": [\n        {\n          \"body\": \"exercitation eu fugiat ad\",\n          \"headers\": {\n            \"do_132\": \"dolore sed officia\",\n            \"ametc\": \"anim ea commodo voluptate\",\n            \"aliquip_786\": \"anim id amet\",\n            \"amet_3\": \"aliqua\"\n          },\n          \"method\": \"non laboris ut commodo\",\n          \"url\": \"fugiat veniam magna ea\"\n        },\n        {\n          \"body\": \"sed Excepteur in\",\n          \"headers\": {\n            \"deserunt_30b\": \"elit sint\",\n            \"dof6_\": \"eu nostrud\"\n          },\n          \"method\": \"laborum et\",\n          \"url\": \"sint pa\"\n        }\n      ],\n      \"config\": {\n        \"expire_utime_after\": 61264358,\n        \"recheck_wait\": -8195693,\n        \"service_discovery\": {\n          \"cache_timeout\": -89181690,\n          \"data_path\": \"reprehenderit Duis non\",\n          \"endpoint_returns_list\": true,\n          \"parent_data_path\": \"ullamco ea minim officia\",\n          \"port_data_path\": \"in veniam sed ut\",\n          \"query_endpoint\": \"amet ex\",\n          \"target_path\": \"nisi veniam ipsum minim sed\",\n          \"use_discovery_service\": false,\n          \"use_nested_query\": true,\n          \"use_target_list\": true\n        }\n      }\n    },\n    \"use_basic_auth\": false,\n    \"use_keyless\": true,\n    \"use_mutual_tls_auth\": true,\n    \"use_oauth2\": true,\n    \"use_openid\": false,\n    \"use_standard_auth\": false,\n    \"version_data\": {\n      \"default_version\": \"ut\",\n      \"not_versioned\": true,\n      \"versions\": {\n        \"proident_0\": {\n          \"paths\": {\n            \"black_list\": [\n              \"officia ipsum in dolore\",\n              \"id ad eu\"\n            ],\n            \"ignored\": [\n              \"Ut sunt nisi\",\n              \"minim in exercitation dolor sed\"\n            ],\n            \"white_list\": [\n              \"esse pariatur nulla\",\n              \"exercitation\"\n            ]\n          },\n          \"expires\": \"commodo sint v\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"Excepteur_0d\": \"non minim\"\n          },\n          \"global_headers_remove\": [\n            \"reprehenderit Duis id et\",\n            \"dolor minim fugiat sit\"\n          ],\n          \"global_size_limit\": -33014828,\n          \"name\": \"qui aliqua ex mollit nostrud\",\n          \"override_target\": \"aute\",\n          \"use_extended_paths\": false\n        }\n      }\n    }\n  },\n  {\n    \"tags\": [\n      \"veniam cupidatat anim\",\n      \"veniam eu\"\n    ],\n    \"CORS\": {\n      \"allow_credentials\": true,\n      \"allowed_headers\": [\n        \"commodo dolore reprehenderit\",\n        \"velit ea\"\n      ],\n      \"allowed_methods\": [\n        \"minim aute dolore\",\n        \"consectetur irure aliqua\"\n      ],\n      \"allowed_origins\": [\n        \"ipsum culpa et\",\n        \"id\"\n      ],\n      \"debug\": true,\n      \"enable\": true,\n      \"exposed_headers\": [\n        \"ut \",\n        \"in veniam ea eiusmod Lorem\"\n      ],\n      \"max_age\": 63705861,\n      \"options_passthrough\": true\n    },\n    \"active\": false,\n    \"allowed_ips\": [\n      \"in laboris do\",\n      \"mollit eiusmod nulla amet fugiat\"\n    ],\n    \"api_id\": \"sunt\",\n    \"auth\": {\n      \"auth_header_name\": \"officia laboris enim labore nostrud\",\n      \"cookie_name\": \"dolor culpa\",\n      \"param_name\": \"et non\",\n      \"signature\": {\n        \"algorithm\": \"nisi nulla\",\n        \"allowed_clock_skew\": 56487298,\n        \"error_code\": -13508661,\n        \"error_message\": \"cillum ipsum Duis\",\n        \"header\": \"est in ut officia voluptate\",\n        \"secret\": \"e\"\n      },\n      \"use_certificate\": true,\n      \"use_cookie\": true,\n      \"use_param\": true,\n      \"validate_signature\": false\n    },\n    \"auth_provider\": {\n      \"meta\": {\n        \"irure_e0\": {},\n        \"autec0\": {}\n      },\n      \"name\": \"commodo Lorem dolor\",\n      \"storage_engine\": \"Lorem fugiat commodo\"\n    },\n    \"base_identity_provided_by\": \"qui\",\n    \"basic_auth\": {\n      \"body_password_regexp\": \"mollit est non\",\n      \"body_user_regexp\": \"cupidatat L\",\n      \"cache_ttl\": 46637375,\n      \"disable_caching\": true,\n      \"extract_from_body\": true\n    },\n    \"blacklisted_ips\": [\n      \"Duis ea Excepteur elit dolor\",\n      \"culpa\"\n    ],\n    \"cache_options\": {\n      \"cache_all_safe_requests\": true,\n      \"cache_control_ttl_header\": \"enim Duis aliqua et eiusmod\",\n      \"cache_response_codes\": [\n        -47909298,\n        -82322528\n      ],\n      \"cache_timeout\": -15928786,\n      \"enable_cache\": true,\n      \"enable_upstream_cache_control\": true\n    },\n    \"certificates\": [\n      \"eu minim quis laborum mollit\",\n      \"Lorem cillum labore\"\n    ],\n    \"client_certificates\": [\n      \"incididunt Ut sin\",\n      \"irure officia\"\n    ],\n    \"config_data\": {\n      \"eu_99\": {}\n    },\n    \"custom_middleware\": {\n      \"auth_check\": {\n        \"name\": \"aliquip in\",\n        \"path\": \"qui Lorem e\",\n        \"require_session\": true\n      },\n      \"driver\": \"adipisicing aliqua culpa et dolore\",\n      \"id_extractor\": {\n        \"extract_from\": \"id pro\",\n        \"extract_with\": \"laborum consequat do\",\n        \"extractor_config\": {\n          \"quis_c\": {},\n          \"velit_8\": {}\n        }\n      },\n      \"post\": [\n        {\n          \"name\": \"\",\n          \"path\": \"q\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"laboris sunt\",\n          \"path\": \"dolor laboris\",\n          \"require_session\": true\n        }\n      ],\n      \"post_key_auth\": [\n        {\n          \"name\": \"do cupidatat cillum consectetur\",\n          \"path\": \"consec\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"qui proident nulla et ex\",\n          \"path\": \"incididunt\",\n          \"require_session\": true\n        }\n      ],\n      \"pre\": [\n        {\n          \"name\": \"irure velit in incididunt consectetur\",\n          \"path\": \"reprehenderit sit in aliquip\",\n          \"require_session\": false\n        },\n        {\n          \"name\": \"mollit exercitation pariatur\",\n          \"path\": \"id qui deserunt dol\",\n          \"require_session\": false\n        }\n      ],\n      \"response\": [\n        {\n          \"name\": \"fugiat\",\n          \"path\": \"ut ex\",\n          \"require_session\": true\n        },\n        {\n          \"name\": \"ea eu veniam\",\n          \"path\": \"voluptate in\",\n          \"require_session\": false\n        }\n      ]\n    },\n    \"custom_middleware_bundle\": \"dolor eu magna eiusmod mollit\",\n    \"definition\": {\n      \"key\": \"labore dolore consequat\",\n      \"location\": \"ea Duis reprehenderit\",\n      \"strip_path\": true\n    },\n    \"disable_quota\": true,\n    \"disable_rate_limit\": true,\n    \"do_not_track\": true,\n    \"domain\": \"do esse Lo\",\n    \"dont_set_quota_on_create\": true,\n    \"enable_batch_request_support\": false,\n    \"enable_context_vars\": false,\n    \"enable_coprocess_auth\": false,\n    \"enable_ip_blacklisting\": false,\n    \"enable_ip_whitelisting\": true,\n    \"enable_jwt\": true,\n    \"enable_signature_checking\": true,\n    \"event_handlers\": {\n      \"events\": {}\n    },\n    \"expire_analytics_after\": -21768165,\n    \"global_rate_limit\": {\n      \"per\": 30063454.882055923,\n      \"rate\": 70195301.85378972\n    },\n    \"hmac_allowed_algorithms\": [\n      \"aliqua cillum\",\n      \"incididunt proident \"\n    ],\n    \"hmac_allowed_clock_skew\": 27393981.99082248,\n    \"id\": \"pariatur dolore eiusmod\",\n    \"internal\": false,\n    \"jwt_client_base_field\": \"adipisicing aliquip ullamco quis\",\n    \"jwt_expires_at_validation_skew\": -62236798,\n    \"jwt_identity_base_field\": \"exercitation esse ipsum\",\n    \"jwt_issued_at_validation_skew\": -5390308,\n    \"jwt_not_before_validation_skew\": -57172460,\n    \"jwt_policy_field_name\": \"venia\",\n    \"jwt_scope_claim_name\": \"tempor exercitation\",\n    \"jwt_scope_to_policy_mapping\": {\n      \"ullamco_80\": \"labore incididunt est pariatur\",\n      \"ut_0b\": \"nostrud\",\n      \"laborum53\": \"tempor cillum sit exercitation\"\n    },\n    \"jwt_signing_method\": \"ipsum\",\n    \"jwt_skip_kid\": false,\n    \"jwt_source\": \"laboris mollit Duis\",\n    \"name\": \"veniam\",\n    \"notifications\": {\n      \"oauth_on_keychange_url\": \"pariatur voluptate eu esse amet\",\n      \"shared_secret\": \"esse Ut dolor incididunt ullamco\"\n    },\n    \"oauth_meta\": {\n      \"allowed_access_types\": [\n        \"ullamco est labore\",\n        \"do ea deserunt sit\"\n      ],\n      \"allowed_authorize_types\": [\n        \"dolore sed Duis\",\n        \"culpa anim nisi ex\"\n      ],\n      \"auth_login_redirect\": \"elit\"\n    },\n    \"openid_options\": {\n      \"providers\": [\n        {\n          \"client_ids\": {\n            \"ad_c\": \"velit\",\n            \"cillum8c\": \"culpa sed\",\n            \"amet_bd\": \"ea nulla quis tempor\"\n          },\n          \"issuer\": \"Duis\"\n        },\n        {\n          \"client_ids\": {\n            \"Ut7a\": \"elit\",\n            \"ad_520\": \"elit labore in\"\n          },\n          \"issuer\": \"sit elit officia ut\"\n        }\n      ],\n      \"segregate_by_client\": true\n    },\n    \"org_id\": \"labore dolor Duis est Lorem\",\n    \"pinned_public_keys\": {\n      \"Excepteur_3bb\": \"amet deserunt et\",\n      \"eaa_\": \"mollit labore aute Excepteur\",\n      \"quis_a2b\": \"Duis magna\",\n      \"elit_96\": \"Excepteur\",\n      \"veniam394\": \"sint Lorem sed dolor\"\n    },\n    \"proxy\": {\n      \"check_host_against_uptime_tests\": true,\n      \"disable_strip_slash\": false,\n      \"enable_load_balancing\": false,\n      \"listen_path\": \"sed dolore deserunt\",\n      \"preserve_host_header\": false,\n      \"service_discovery\": {\n        \"cache_timeout\": 96205482,\n        \"data_path\": \"Excepteur incididunt\",\n        \"endpoint_returns_list\": true,\n        \"parent_data_path\": \"m\",\n        \"port_data_path\": \"in \",\n        \"query_endpoint\": \"consequat ir\",\n        \"target_path\": \"Excepteur deserunt consectetur\",\n        \"use_discovery_service\": false,\n        \"use_nested_query\": false,\n        \"use_target_list\": true\n      },\n      \"strip_listen_path\": true,\n      \"target_list\": [\n        \"Duis labore pariatur\",\n        \"tempor\"\n      ],\n      \"target_url\": \"exercitation occae\",\n      \"transport\": {\n        \"proxy_url\": \"sint consequat aliqua velit\",\n        \"ssl_ciphers\": [\n          \"id in deserunt ad laboris\",\n          \"nisi enim\"\n        ],\n        \"ssl_insecure_skip_verify\": false,\n        \"ssl_min_version\": -70483776\n      }\n    },\n    \"response_processors\": [\n      {\n        \"name\": \"Excepteur consectetur\",\n        \"options\": {}\n      },\n      {\n        \"name\": \"qui sunt\",\n        \"options\": {}\n      }\n    ],\n    \"session_lifetime\": -39930998,\n    \"session_provider\": {\n      \"meta\": {\n        \"dolor81\": {},\n        \"ipsume9c\": {}\n      },\n      \"name\": \"Duis fugiat sint\",\n      \"storage_engine\": \"mollit in laboris aliqua\"\n    },\n    \"slug\": \"culpa exercitation in\",\n    \"strip_auth_data\": false,\n    \"tag_headers\": [\n      \"ea sunt\",\n      \"nulla ullamco consequat\"\n    ],\n    \"upstream_certificates\": {\n      \"exf2\": \"ipsum do ex\",\n      \"velit_a6\": \"dolor\"\n    },\n    \"uptime_tests\": {\n      \"check_list\": [\n        {\n          \"body\": \"incididunt deserunt pariatur sit\",\n          \"headers\": {\n            \"elitb\": \"cillum sit ex anim\",\n            \"Excepteur_89\": \"fugiat\",\n            \"et7c\": \"enim consequat in\"\n          },\n          \"method\": \"nostrud in occaecat\",\n          \"url\": \"eu ad\"\n        },\n        {\n          \"body\": \"officia\",\n          \"headers\": {\n            \"incididunt_37\": \"\",\n            \"mollit_f1c\": \"dolor Excepteur consequat officia\",\n            \"ut0\": \"dolore anim\"\n          },\n          \"method\": \"qui\",\n          \"url\": \"magna ullamco non ut\"\n        }\n      ],\n      \"config\": {\n        \"expire_utime_after\": 75096057,\n        \"recheck_wait\": 86078839,\n        \"service_discovery\": {\n          \"cache_timeout\": 54472529,\n          \"data_path\": \"nostrud proident elit culpa ipsum\",\n          \"endpoint_returns_list\": true,\n          \"parent_data_path\": \"est Lorem reprehenderit Ut deserunt\",\n          \"port_data_path\": \"sunt do ut velit\",\n          \"query_endpoint\": \"culpa ut sit Lorem\",\n          \"target_path\": \"veniam magna in\",\n          \"use_discovery_service\": true,\n          \"use_nested_query\": false,\n          \"use_target_list\": true\n        }\n      }\n    },\n    \"use_basic_auth\": false,\n    \"use_keyless\": true,\n    \"use_mutual_tls_auth\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": true,\n    \"use_standard_auth\": false,\n    \"version_data\": {\n      \"default_version\": \"in id in\",\n      \"not_versioned\": false,\n      \"versions\": {\n        \"ullamcod\": {\n          \"paths\": {\n            \"black_list\": [\n              \"minim sunt\",\n              \"Lorem\"\n            ],\n            \"ignored\": [\n              \"laborum et aute deserunt\",\n              \"deserunt nulla\"\n            ],\n            \"white_list\": [\n              \"non occaecat do m\",\n              \"laboris co\"\n            ]\n          },\n          \"expires\": \"pariatur consectetur sint\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"sint_b21\": \"ad exercitation adip\"\n          },\n          \"global_headers_remove\": [\n            \"aliquip sit exercitation\",\n            \"ullamco ex in dolore\"\n          ],\n          \"global_size_limit\": 74355163,\n          \"name\": \"enim anim\",\n          \"override_target\": \"amet velit dolore\",\n          \"use_extended_paths\": false\n        },\n        \"velit26\": {\n          \"paths\": {\n            \"black_list\": [\n              \"anim\",\n              \"ut enim cillum\"\n            ],\n            \"ignored\": [\n              \"dolor aute laboris sint irure\",\n              \"nostrud occaecat reprehenderit\"\n            ],\n            \"white_list\": [\n              \"ad consequat Duis\",\n              \"dolore aliqua et officia\"\n            ]\n          },\n          \"expires\": \"officia fugiat voluptate ad\",\n          \"extended_paths\": {\n            \"advance_cache_config\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"black_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"cache\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"circuit_breakers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"do_not_track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"hard_timeouts\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"ignored\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"internal\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"method_transforms\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"size_limits\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_jq_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"transform_response_headers\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"url_rewrites\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"validate_json\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"virtual\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"white_list\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"global_headers\": {\n            \"culpaa\": \"sint consectetur sunt\"\n          },\n          \"global_headers_remove\": [\n            \"dolore irure\",\n            \"Duis et eiusmod id\"\n          ],\n          \"global_size_limit\": 94237026,\n          \"name\": \"non veniam\",\n          \"override_target\": \"ut ut\",\n          \"use_extended_paths\": false\n        }\n      }\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "activity",
					"item": [
						{
							"name": "Analytics of API Key",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/activity/keys/:keyHash/:startDay/:startMonth/:startYear/:EndDay/:EndMonth/:EndYear",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"activity",
										"keys",
										":keyHash",
										":startDay",
										":startMonth",
										":startYear",
										":EndDay",
										":EndMonth",
										":EndYear"
									],
									"variable": [
										{
											"key": "keyHash",
											"value": "aute ut Duis Ut",
											"description": "(Required) Hash of your API key."
										},
										{
											"key": "startDay",
											"value": "aute ut Duis Ut",
											"description": "(Required) Day of analytics to query."
										},
										{
											"key": "startMonth",
											"value": "aute ut Duis Ut",
											"description": "(Required) Month of analytics to query."
										},
										{
											"key": "startYear",
											"value": "aute ut Duis Ut",
											"description": "(Required) Start year of analytics to query."
										},
										{
											"key": "EndDay",
											"value": "aute ut Duis Ut",
											"description": "(Required) End date of analytics to query."
										},
										{
											"key": "EndMonth",
											"value": "aute ut Duis Ut",
											"description": "(Required) End month of analytics to query."
										},
										{
											"key": "EndYear",
											"value": "aute ut Duis Ut",
											"description": "(Required) End year of analytics to query."
										}
									]
								},
								"description": "It returns analytics of the endpoints of all APIs called using KEY between start and end date."
							},
							"response": [
								{
									"name": "Returns analytics of all endpoints called using the key `7f3c3ca87376cabe` between October 13th 2020 and October 14th 2020.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/activity/keys/:keyHash/:startDay/:startMonth/:startYear/:EndDay/:EndMonth/:EndYear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"activity",
												"keys",
												":keyHash",
												":startDay",
												":startMonth",
												":startYear",
												":EndDay",
												":EndMonth",
												":EndYear"
											],
											"variable": [
												{
													"key": "keyHash",
													"value": "aute ut Duis Ut",
													"description": "(Required) Hash of your API key."
												},
												{
													"key": "startDay",
													"value": "aute ut Duis Ut",
													"description": "(Required) Day of analytics to query."
												},
												{
													"key": "startMonth",
													"value": "aute ut Duis Ut",
													"description": "(Required) Month of analytics to query."
												},
												{
													"key": "startYear",
													"value": "aute ut Duis Ut",
													"description": "(Required) Start year of analytics to query."
												},
												{
													"key": "EndDay",
													"value": "aute ut Duis Ut",
													"description": "(Required) End date of analytics to query."
												},
												{
													"key": "EndMonth",
													"value": "aute ut Duis Ut",
													"description": "(Required) End month of analytics to query."
												},
												{
													"key": "EndYear",
													"value": "aute ut Duis Ut",
													"description": "(Required) End year of analytics to query."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": {\n        \"day\": 0,\n        \"month\": 0,\n        \"year\": 0,\n        \"hour\": 0,\n        \"code\": 0,\n        \"path\": \"/anything\",\n        \"key\": \"\",\n        \"alias\": \"\",\n        \"url\": \"\",\n        \"iso_country\": \"\",\n        \"api_id\": \"41351a6a94094da05f75146a695a16f6\",\n        \"api_name\": \"\"\n      },\n      \"hits\": 1,\n      \"success\": 1,\n      \"error\": 0,\n      \"last_hit\": \"2020-10-13T13:22:49.667+05:30\",\n      \"request_time\": 0,\n      \"latency\": 217,\n      \"upstream_latency\": 217,\n      \"max_upstream_latency\": 217,\n      \"min_upstream_latency\": 217,\n      \"max_latency\": 217,\n      \"min_latency\": 217\n    },\n    {\n      \"id\": {\n        \"day\": 0,\n        \"month\": 0,\n        \"year\": 0,\n        \"hour\": 0,\n        \"code\": 0,\n        \"path\": \"/anything\",\n        \"key\": \"\",\n        \"alias\": \"\",\n        \"url\": \"\",\n        \"iso_country\": \"\",\n        \"api_id\": \"1793db2cbb724ad54da582ce3191d383\",\n        \"api_name\": \"\"\n      },\n      \"hits\": 1,\n      \"success\": 1,\n      \"error\": 0,\n      \"last_hit\": \"2020-10-13T13:22:20.534+05:30\",\n      \"request_time\": 568,\n      \"latency\": 568,\n      \"upstream_latency\": 568,\n      \"max_upstream_latency\": 568,\n      \"min_upstream_latency\": 568,\n      \"max_latency\": 568,\n      \"min_latency\": 568\n    }\n  ],\n  \"pages\": 1\n}"
								}
							]
						},
						{
							"name": "Analytics of Oauth Client ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/activity/oauthid/:OAuthClientID/:startDay/:startMonth/:startYear/:EndDay/:EndMonth/:EndYear",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"activity",
										"oauthid",
										":OAuthClientID",
										":startDay",
										":startMonth",
										":startYear",
										":EndDay",
										":EndMonth",
										":EndYear"
									],
									"variable": [
										{
											"key": "OAuthClientID",
											"value": "aute ut Duis Ut",
											"description": "(Required) OAuthClientID"
										},
										{
											"key": "startDay",
											"value": "aute ut Duis Ut",
											"description": "(Required) Day of analytics to query."
										},
										{
											"key": "startMonth",
											"value": "aute ut Duis Ut",
											"description": "(Required) Month of analytics to query."
										},
										{
											"key": "startYear",
											"value": "aute ut Duis Ut",
											"description": "(Required) Start year of analytics to query."
										},
										{
											"key": "EndDay",
											"value": "aute ut Duis Ut",
											"description": "(Required) End date of analytics to query."
										},
										{
											"key": "EndMonth",
											"value": "aute ut Duis Ut",
											"description": "(Required) End month of analytics to query."
										},
										{
											"key": "EndYear",
											"value": "aute ut Duis Ut",
											"description": "(Required) End year of analytics to query."
										}
									]
								},
								"description": "Returns activity of all endpoints which used OAuth client `27b35a9ed46e429eb2361e440cc4005c` between October 13th 2020 and October 14th 2020."
							},
							"response": [
								{
									"name": "Returns analytics of all endpoints called using the key `7f3c3ca87376cabe` between October 13th 2020 and October 14th 2020.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/activity/oauthid/:OAuthClientID/:startDay/:startMonth/:startYear/:EndDay/:EndMonth/:EndYear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"activity",
												"oauthid",
												":OAuthClientID",
												":startDay",
												":startMonth",
												":startYear",
												":EndDay",
												":EndMonth",
												":EndYear"
											],
											"variable": [
												{
													"key": "OAuthClientID",
													"value": "aute ut Duis Ut",
													"description": "(Required) OAuthClientID"
												},
												{
													"key": "startDay",
													"value": "aute ut Duis Ut",
													"description": "(Required) Day of analytics to query."
												},
												{
													"key": "startMonth",
													"value": "aute ut Duis Ut",
													"description": "(Required) Month of analytics to query."
												},
												{
													"key": "startYear",
													"value": "aute ut Duis Ut",
													"description": "(Required) Start year of analytics to query."
												},
												{
													"key": "EndDay",
													"value": "aute ut Duis Ut",
													"description": "(Required) End date of analytics to query."
												},
												{
													"key": "EndMonth",
													"value": "aute ut Duis Ut",
													"description": "(Required) End month of analytics to query."
												},
												{
													"key": "EndYear",
													"value": "aute ut Duis Ut",
													"description": "(Required) End year of analytics to query."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": {\n        \"day\": 0,\n        \"month\": 0,\n        \"year\": 0,\n        \"hour\": 0,\n        \"code\": 0,\n        \"path\": \"/get\",\n        \"key\": \"\",\n        \"alias\": \"\",\n        \"url\": \"\",\n        \"iso_country\": \"\",\n        \"api_id\": \"79fc7cb80df940cc5089772200bd4926\",\n        \"api_name\": \"\"\n      },\n      \"hits\": 2,\n      \"success\": 1,\n      \"error\": 1,\n      \"last_hit\": \"2020-10-13T14:48:51.582+05:30\",\n      \"request_time\": 498,\n      \"latency\": 498,\n      \"upstream_latency\": 497.5,\n      \"max_upstream_latency\": 747,\n      \"min_upstream_latency\": 248,\n      \"max_latency\": 748,\n      \"min_latency\": 248\n    },\n    {\n      \"id\": {\n        \"day\": 0,\n        \"month\": 0,\n        \"year\": 0,\n        \"hour\": 0,\n        \"code\": 0,\n        \"path\": \"/post\",\n        \"key\": \"\",\n        \"alias\": \"\",\n        \"url\": \"\",\n        \"iso_country\": \"\",\n        \"api_id\": \"79fc7cb80df940cc5089772200bd4926\",\n        \"api_name\": \"\"\n      },\n      \"hits\": 1,\n      \"success\": 1,\n      \"error\": 0,\n      \"last_hit\": \"2020-10-13T14:49:31.541+05:30\",\n      \"request_time\": 0,\n      \"latency\": 241,\n      \"upstream_latency\": 239,\n      \"max_upstream_latency\": 239,\n      \"min_upstream_latency\": 239,\n      \"max_latency\": 241,\n      \"min_latency\": 241\n    }\n  ],\n  \"pages\": 1\n}"
								}
							]
						}
					]
				},
				{
					"name": "keys",
					"item": [
						{
							"name": "Create a key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"api_name\": \"Nitrous Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/keys",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"keys"
									]
								},
								"description": "Tyk will generate the access token based on the OrgID specified in the API Definition and a random UUID. This ensures that keys can be \"owned\" by different API Owners should segmentation be needed at an organisational level.\n<br/><br/>\nAPI keys without access_rights data will be written to all APIs on the system (this also means that they will be created across all SessionHandlers and StorageHandlers, it is recommended to always embed access_rights data in a key to ensure that only targeted APIs and their back-ends are written to."
							},
							"response": [
								{
									"name": "New Key added",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"api_name\": \"Nitrous Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/keys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"keys"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"api_model\": {},\n  \"key_id\": \"eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0\",\n  \"data\": {\n    \"last_check\": 1421674410,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 1423684135,\n    \"quota_max\": -1,\n    \"quota_renews\": 1421164189,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": 60,\n    \"access_rights\": {\n      \"39d2c98be05c424371c600bd8b3e2242\": {\n        \"api_name\": \"Nitrous Test\",\n        \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n        \"versions\": [\n          \"Default\"\n        ]\n      }\n    }\n  },\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"oauth_client_id\": \"\",\n  \"basic_auth_data\": {\n    \"password\": \"\"\n  },\n  \"hmac_enabled\": true,\n  \"hmac_string\": \"\"\n}"
								},
								{
									"name": "Unauthorized.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"api_name\": \"Nitrous Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/keys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"keys"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"User does not have permission to add API to key Access Rights!\"\n}"
								}
							]
						},
						{
							"name": "Create custom key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"api_name\": \"Nitrous Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/keys/:keyID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"keys",
										":keyID"
									],
									"variable": [
										{
											"key": "keyID",
											"value": "aute ut Duis Ut",
											"description": "(Required) The Key ID."
										}
									]
								},
								"description": "Creates a key with a custom key ID."
							},
							"response": [
								{
									"name": "Custom key created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"api_name\": \"Nitrous Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/keys/:keyID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"keys",
												":keyID"
											],
											"variable": [
												{
													"key": "keyID",
													"value": "aute ut Duis Ut",
													"description": "(Required) The Key ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"api_model\": {},\n  \"key_id\": \"eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0\",\n  \"data\": {\n    \"last_check\": 1421674410,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 1423684135,\n    \"quota_max\": -1,\n    \"quota_renews\": 1421164189,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": 60,\n    \"access_rights\": {\n      \"39d2c98be05c424371c600bd8b3e2242\": {\n        \"api_name\": \"Nitrous Test\",\n        \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n        \"versions\": [\n          \"Default\"\n        ]\n      }\n    }\n  },\n  \"key_hash\": \"567b9a5419c3a9ef\"\n}"
								},
								{
									"name": "Unauthorized.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_check\": 1421674410,\n  \"allowance\": 1000,\n  \"rate\": 1000,\n  \"per\": 60,\n  \"expires\": 1423684135,\n  \"quota_max\": -1,\n  \"quota_renews\": 1421164189,\n  \"quota_remaining\": -1,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"39d2c98be05c424371c600bd8b3e2242\": {\n      \"api_id\": \"39d2c98be05c424371c600bd8b3e2242\",\n      \"api_name\": \"Nitrous Test\",\n      \"versions\": [\n        \"Default\"\n      ]\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/keys/:keyID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"keys",
												":keyID"
											],
											"variable": [
												{
													"key": "keyID",
													"value": "aute ut Duis Ut",
													"description": "(Required) The Key ID."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"User does not have permission to add API to key Access Rights!\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "org",
					"item": [
						{
							"name": "permissions",
							"item": [
								{
									"name": "List additional permissions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/org/permissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"org",
												"permissions"
											]
										},
										"description": "This API helps you to add and delete (CRUD) a list of additional (custom) permissions for your Dashboard users. Once created, a custom permission will be added to standard list of user permissions. Only Admin Dashboard users will be authorised to use this API."
									},
									"response": [
										{
											"name": "Additional Permissions retrieved successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/org/permissions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"org",
														"permissions"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"additional_permissions\": {\n    \"api_developer\": \"API Developer\",\n    \"api_manager\": \"API Manager\"\n  }\n}"
										},
										{
											"name": "Unauthorized.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/org/permissions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"org",
														"permissions"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"Not authorised\"\n}"
										}
									]
								},
								{
									"name": "Modify additional permissions",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"additional_permissions\": {\n    \"api_developer\": \"API Developer\",\n    \"api_manager\": \"API Manager\",\n    \"custom_permission\": \"Custom Permission\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/org/permissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"org",
												"permissions"
											]
										},
										"description": "Whenever you want to add/update/delete an additional permission, just send back the updated list of permissions, through a PUT request to the API."
									},
									"response": [
										{
											"name": "Additional Permissions updated successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"additional_permissions\": {\n    \"api_developer\": \"API Developer\",\n    \"api_manager\": \"API Manager\",\n    \"custom_permission\": \"Custom Permission\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/org/permissions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"org",
														"permissions"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"Additional Permissions updated in org level\"\n}"
										},
										{
											"name": "Unauthorized.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"additional_permissions\": {\n    \"api_developer\": \"API Developer\",\n    \"api_manager\": \"API Manager\",\n    \"custom_permission\": \"Custom Permission\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/org/permissions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"org",
														"permissions"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"Not authorised\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "List OPA Rules",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/org/opa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"org",
										"opa"
									]
								},
								"description": "Lists OPA Rules."
							},
							"response": [
								{
									"name": "Key retrieved successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/org/opa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"org",
												"opa"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"open_policy\": {\n    \"enabled\": true,\n    \"rules\": \"default hello = false\\r\\n\\r\\nhello {\\r\\n    m := input.message\\r\\n    m == \\\"world\\\"\\r\\n}\"\n  }\n}"
								}
							]
						},
						{
							"name": "Update OPA Rules",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"enabled\": false,\n  \"rules\": \"default hello = false\\r\\n\\r\\nhello {\\r\\n    m := input.message\\r\\n    m == \\\"world\\\"\\r\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/org/permission",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"org",
										"permission"
									]
								},
								"description": "Update OPA Rule Settings"
							},
							"response": [
								{
									"name": "tets",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": false,\n  \"rules\": \"default hello = false\\r\\n\\r\\nhello {\\r\\n    m := input.message\\r\\n    m == \\\"world\\\"\\r\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/org/permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"org",
												"permission"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"OPA rules has been updated on org level\",\n  \"Meta\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "{USER ID}",
							"item": [
								{
									"name": "actions",
									"item": [
										{
											"name": "key/reset",
											"item": [
												{
													"name": "Reset current Dashboard session for specified user",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"userId\": \"{USER_ID}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:USER_ID/actions/key/reset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":USER_ID",
																"actions",
																"key",
																"reset"
															],
															"variable": [
																{
																	"key": "USER_ID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) User ID of the user whose current Dashboard session will be reset"
																}
															]
														},
														"description": "Reset specified user's current Dashboard session.  User's Dashboard API credentials will also be reset."
													},
													"response": [
														{
															"name": "Dashboard session for specified user has been reset successfully",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"userId\": \"{USER_ID}\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/users/:USER_ID/actions/key/reset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		":USER_ID",
																		"actions",
																		"key",
																		"reset"
																	],
																	"variable": [
																		{
																			"key": "USER_ID",
																			"value": "aute ut Duis Ut",
																			"description": "(Required) User ID of the user whose current Dashboard session will be reset"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"User session renewed\",\n  \"Meta\": null\n}"
														}
													]
												},
												{
													"name": "Delete User",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/:USER_ID/actions/key/reset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":USER_ID",
																"actions",
																"key",
																"reset"
															],
															"variable": [
																{
																	"key": "USER_ID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) User ID of the user whose current Dashboard session will be reset"
																}
															]
														},
														"description": "Delete a Dashboard user"
													},
													"response": [
														{
															"name": "Dashboard user deleted",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/:USER_ID/actions/key/reset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		":USER_ID",
																		"actions",
																		"key",
																		"reset"
																	],
																	"variable": [
																		{
																			"key": "USER_ID",
																			"value": "aute ut Duis Ut",
																			"description": "(Required) User ID of the user whose current Dashboard session will be reset"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"User deleted\",\n  \"Meta\": \"\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Set User Password",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"current_password\": \"12345\",\n  \"new_password\": \"test123456\",\n  \"user_permissions\": {\n    \"IsAdmin\": \"admin\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/:USER_ID/actions/reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":USER_ID",
														"actions",
														"reset"
													],
													"variable": [
														{
															"key": "USER_ID",
															"value": "aute ut Duis Ut",
															"description": "(Required) User ID of the user whose password is being reset"
														}
													]
												},
												"description": "Set a user's password"
											},
											"response": [
												{
													"name": "User password updated",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"current_password\": \"12345\",\n  \"new_password\": \"test123456\",\n  \"user_permissions\": {\n    \"IsAdmin\": \"admin\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:USER_ID/actions/reset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":USER_ID",
																"actions",
																"reset"
															],
															"variable": [
																{
																	"key": "USER_ID",
																	"value": "aute ut Duis Ut",
																	"description": "(Required) User ID of the user whose password is being reset"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"User password updated\",\n  \"Meta\": \"\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get User",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:USER_ID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":USER_ID"
											],
											"variable": [
												{
													"key": "USER_ID",
													"value": "aute ut Duis Ut",
													"description": "(Required) USER ID of the user to retrieve data for"
												}
											]
										},
										"description": "Get user specified by {USER_ID} in path."
									},
									"response": [
										{
											"name": "User retrieved succesfully",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:USER_ID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":USER_ID"
													],
													"variable": [
														{
															"key": "USER_ID",
															"value": "aute ut Duis Ut",
															"description": "(Required) USER ID of the user to retrieve data for"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"api_model\": {},\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"email_address\": \"banana@test.com\",\n  \"password\": \"\",\n  \"org_id\": \"54b53d3aeba6db5c35000002\",\n  \"active\": true,\n  \"id\": \"54bd0ad9ff4329b88985aafb\",\n  \"access_key\": \"f81ee6f0c8f2467d539c132c8a422346\"\n}"
										}
									]
								},
								{
									"name": "Update User",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"Jason\",\n  \"last_name\": \"File\",\n  \"email_address\": \"jason.file@jasonsonson.com\",\n  \"active\": true,\n  \"user_permissions\": {\n    \"IsAdmin\": \"admin\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/:USER_ID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":USER_ID"
											],
											"variable": [
												{
													"key": "USER_ID",
													"value": "aute ut Duis Ut",
													"description": "(Required) USER ID of the user to retrieve data for"
												}
											]
										},
										"description": "Update User"
									},
									"response": [
										{
											"name": "User updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"first_name\": \"Jason\",\n  \"last_name\": \"File\",\n  \"email_address\": \"jason.file@jasonsonson.com\",\n  \"active\": true,\n  \"user_permissions\": {\n    \"IsAdmin\": \"admin\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/:USER_ID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":USER_ID"
													],
													"variable": [
														{
															"key": "USER_ID",
															"value": "aute ut Duis Ut",
															"description": "(Required) USER ID of the user to retrieve data for"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"User updated\",\n  \"Meta\": null\n}"
										}
									]
								}
							]
						},
						{
							"name": "List Users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Lists Dashboard Users"
							},
							"response": [
								{
									"name": "Users retrieved successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"users\": [\n    {\n      \"api_model\": {},\n      \"first_name\": \"John\",\n      \"last_name\": \"Smith\",\n      \"email_address\": \"john@jive.ly\",\n      \"password\": \"$2a$10$mRVfrAf72N66anVNhA1KVuYaOwOrXhFzxyg6bwgZemUeVo2MNOpIa\",\n      \"org_id\": \"54b53d3aeba6db5c35000002\",\n      \"active\": true,\n      \"id\": \"54b53d4bf25b920f09361526\",\n      \"access_key\": \"0cf5e6c37add465a406f19807c081765\",\n      \"user_permissions\": {\n        \"IsAdmin\": \"admin\",\n        \"ResetPassword\": \"admin\"\n      }\n    },\n    {\n      \"api_model\": {},\n      \"first_name\": \"Test\",\n      \"last_name\": \"User\",\n      \"email_address\": \"banana@test.com\",\n      \"password\": \"\",\n      \"org_id\": \"54b53d3aeba6db5c35000002\",\n      \"active\": true,\n      \"id\": \"54bd0ad9ff4329b88985aafb\",\n      \"access_key\": \"f81ee6f0c8f2467d539c132c8a422346\",\n      \"user_permissions\": {\n        \"user_groups\": \"read\",\n        \"users\": \"read\"\n      }\n    }\n  ],\n  \"pages\": 0\n}"
								}
							]
						},
						{
							"name": "Add User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Jason\",\n  \"last_name\": \"Jasonson\",\n  \"email_address\": \"jason@jasonsonson.com\",\n  \"active\": true,\n  \"password\": \"thisisatest\",\n  \"user_permissions\": {\n    \"IsAdmin\": \"admin\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Add a User"
							},
							"response": [
								{
									"name": "User added succesfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"Jason\",\n  \"last_name\": \"Jasonson\",\n  \"email_address\": \"jason@jasonsonson.com\",\n  \"active\": true,\n  \"password\": \"thisisatest\",\n  \"user_permissions\": {\n    \"IsAdmin\": \"admin\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"User created\",\n  \"Meta\": \"\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Generate authentication token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ForSection\": \"dashboard\",\n  \"OrgID\": \"588b4f0bb275ff0001cc7471\",\n  \"EmailAddress\": \"name@somewhere.com\",\n  \"GroupID\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/sso/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"sso",
								""
							]
						},
						"description": "The Dashboard exposes the /api/sso Dashboard API which allows you to generate a temporary authentication token, valid for 60 seconds."
					},
					"response": [
						{
							"name": "Auth Token generated.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ForSection\": \"dashboard\",\n  \"OrgID\": \"588b4f0bb275ff0001cc7471\",\n  \"EmailAddress\": \"name@somewhere.com\",\n  \"GroupID\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/sso/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"sso",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Status\": \"OK\",\n  \"Message\": \"SSO Nonce created\",\n  \"Meta\": \"YTNiOGUzZjctYWZkYi00OTNhLTYwODItZTAzMDI3MjM0OTEw\"\n}"
						},
						{
							"name": "Back Request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ForSection\": \"dashboard\",\n  \"OrgID\": \"588b4f0bb275ff0001cc7471\",\n  \"EmailAddress\": \"name@somewhere.com\",\n  \"GroupID\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/sso/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"sso",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"Cannot create an SSO session for an invalid payload: [Error: Org id not found ('588b4f0bb275ff0001cc7471').]\"\n}"
						},
						{
							"name": "Unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ForSection\": \"dashboard\",\n  \"OrgID\": \"588b4f0bb275ff0001cc7471\",\n  \"EmailAddress\": \"name@somewhere.com\",\n  \"GroupID\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/sso/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"sso",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Status\": \"Error\",\n  \"Message\": \"Not authorised\"\n}"
						}
					]
				},
				{
					"name": "get Schema",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/schema?oasVersion=aute ut Duis Ut",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"schema"
							],
							"query": [
								{
									"key": "oasVersion",
									"value": "aute ut Duis Ut",
									"description": "The OAS version"
								}
							]
						},
						"description": "Get OAS schema"
					},
					"response": [
						{
							"name": "OAS schema response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/schema?oasVersion=aute ut Duis Ut",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"schema"
									],
									"query": [
										{
											"key": "oasVersion",
											"value": "aute ut Duis Ut"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"Success\",\n  \"schema\": \"<open api 3.0.3 schema>\"\n}"
						},
						{
							"name": "response when parameter oasVersion is missing",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/schema?oasVersion=aute ut Duis Ut",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"schema"
									],
									"query": [
										{
											"key": "oasVersion",
											"value": "aute ut Duis Ut"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Should provide a value for parameter oasVersion\",\n  \"status\": \"Failed\"\n}"
						},
						{
							"name": "response when oasSchema fetch failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/schema?oasVersion=aute ut Duis Ut",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"schema"
									],
									"query": [
										{
											"key": "oasVersion",
											"value": "aute ut Duis Ut"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Could not retrieve OAS schema: Schema not found for version 5.0.0\",\n  \"status\": \"Failed\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "<Bearer Token>",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/",
			"type": "string"
		}
	]
}